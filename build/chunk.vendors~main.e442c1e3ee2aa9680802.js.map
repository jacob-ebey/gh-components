{"version":3,"sources":["webpack:///./node_modules/gh-components-core/dist/index.js","webpack:///./node_modules/@polymer/polymer/lib/utils/boot.js","webpack:///./node_modules/@polymer/polymer/lib/utils/resolve-url.js","webpack:///./node_modules/@polymer/polymer/lib/utils/settings.js","webpack:///./node_modules/@polymer/polymer/lib/utils/mixin.js","webpack:///./node_modules/@polymer/polymer/lib/elements/dom-module.js","webpack:///./node_modules/@polymer/polymer/lib/utils/style-gather.js","webpack:///./node_modules/@polymer/polymer/lib/utils/wrap.js","webpack:///./node_modules/@polymer/polymer/lib/utils/path.js","webpack:///./node_modules/@polymer/polymer/lib/utils/case-map.js","webpack:///./node_modules/@polymer/polymer/lib/utils/async.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-changed.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-accessors.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/template-stamp.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-effects.js","webpack:///./node_modules/@polymer/polymer/lib/utils/telemetry.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/properties-mixin.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/element-mixin.js","webpack:///./node_modules/@polymer/polymer/lib/utils/html-tag.js","webpack:///./node_modules/@polymer/polymer/polymer-element.js","webpack:///./node_modules/@polymer/polymer/lib/utils/array-splice.js","webpack:///./node_modules/@polymer/polymer/lib/utils/flattened-nodes-observer.js","webpack:///./node_modules/@kuscamara/code-sample/themes/one-dark.js","webpack:///./node_modules/@kuscamara/code-sample/code-sample.js","webpack:///./node_modules/gh-components-core/node_modules/lit-html/lib/directive.js","webpack:///./node_modules/gh-components-core/node_modules/lit-html/lib/dom.js","webpack:///./node_modules/gh-components-core/node_modules/lit-html/lib/part.js","webpack:///./node_modules/gh-components-core/node_modules/lit-html/lib/template.js","webpack:///./node_modules/gh-components-core/node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/gh-components-core/node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/gh-components-core/node_modules/lit-html/lib/parts.js","webpack:///./node_modules/gh-components-core/node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/gh-components-core/node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/gh-components-core/node_modules/lit-html/lib/render.js","webpack:///./node_modules/gh-components-core/node_modules/lit-html/lit-html.js","webpack:///./node_modules/navigo/lib/navigo.min.js","webpack:///./node_modules/gh-components-core/dist/gh-element.js","webpack:///./node_modules/gh-components-core/node_modules/shadow-css/dist.js","webpack:///./node_modules/gh-components-core/node_modules/camel-to-kebab/dist/camel-to-kebab.js","webpack:///./node_modules/gh-components-core/node_modules/camelcase/index.js","webpack:///./node_modules/gh-components-core/dist/scheduler.js","webpack:///./node_modules/gh-components-core/dist/types.js","webpack:///./node_modules/@kuscamara/code-sample/vendor/highlight/highlight.pack.js"],"names":["__export","m","p","exports","hasOwnProperty","Object","defineProperty","value","__webpack_require__","window","JSCompiler_renameProperty","prop","obj","workingURL","resolveDoc","CSS_URL_RX","ABS_URL","resolveUrl","url","baseURI","test","undefined","u","URL","pathname","href","e","document","location","implementation","createHTMLDocument","base","createElement","head","appendChild","anchor","body","resolveCss","cssText","replace","pre","post","pathFromUrl","substring","lastIndexOf","Boolean","ShadyCSS","nativeCss","customElements","rootPath","sanitizeDOMValue","Polymer","strictTemplatePolicy","allowTemplateFromDomModule","legacyOptimizations","syncInitialRender","mixin_dedupeId","MixinFunction","prototype","__mixinApplications","__mixinSet","dedupingMixin","mixin","mixinApplications","WeakMap","mixinDedupeId","baseSet","map","extended","get","set","mixinSet","create","modules","lcModules","setModule","id","module","toLowerCase","findModule","dom_module_DomModule","HTMLElement","observedAttributes","[object Object]","selector","querySelector","name","old","namespace","this","register","assetpath","__assetpath","owner","HTMLImports","importForElement","ownerDocument","getAttribute","Error","inst","console","warn","define","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","SHADY_UNSCOPED_ATTR","importModule","moduleId","import","styleForImport","importDoc","importCss","textContent","style","stylesFromModules","moduleIds","trim","split","styles","i","length","push","stylesFromModule","_styles","_stylesFromModuleImports","template","stylesFromTemplate","e$","content","querySelectorAll","include","filter","item","index","self","indexOf","p$","unscoped","hasAttribute","_unscopedStyle","setAttribute","_style","wrap","n","isPath","path","path_root","dotIndex","slice","isAncestor","isDescendant","translate","newBase","normalize","Array","isArray","parts","args","toString","j","join","root","info","last","caseMap","DASH_TO_CAMEL","CAMEL_TO_DASH","dashToCamelCase","dash","toUpperCase","camelToDashCase","camel","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","len","cb","setTimeout","splice","observe","characterData","microTask","run","callback","handle","idx","microtask","properties_changed_PropertiesChanged","superClass","props","proto","_createPropertyAccessor","property","readOnly","_addPropertyToAttributeMap","__dataHasAccessor","assign","_definePropertyAccessor","__dataAttributes","attr","constructor","attributeNameForProperty","_getProperty","_setProperty","super","__dataEnabled","__dataReady","__dataInvalid","__data","__dataPending","__dataOld","__dataInstanceProps","__serializing","_initializeProperties","_flushProperties","_setPendingProperty","_invalidateProperties","ext","changed","_shouldPropertyChange","_initializeInstanceProperties","ready","changedProps","_shouldPropertiesChange","_propertiesChanged","currentProps","oldProps","_attributeToProperty","attributeChangedCallback","attribute","type","_deserializeValue","typeForProperty","arguments","_valueToNodeAttribute","node","str","_serializeValue","removeAttribute","Number","nativeProperties","getOwnPropertyNames","getPrototypeOf","property_accessors_PropertyAccessors","a$","__dataProto","_initializeProtoProperties","el","Date","JSON","stringify","x","outValue","parse","isNaN","String","model","saveAccessorValue","walker","createTreeWalker","NodeFilter","SHOW_ALL","templateExtensions","dom-if","dom-repeat","wrapTemplateExtension","is","t","parentNode","replaceChild","attributes","findTemplateNode","nodeInfo","parent","parentInfo","currentNode","firstChild","nextSibling","parentIndex","applyIdToMap","applyEventListener","events","_addMethodEventListenerToNode","applyTemplateContent","templateInfo","_templateInfo","TemplateStamp","outerTemplateInfo","nodeInfoList","stripWhiteSpace","_parseTemplateContent","_parseTemplateNode","noted","element","localName","hasInsertionPoint","_parseTemplateNestedTemplate","_parseTemplateChildNodes","hasAttributes","_parseTemplateNodeAttributes","next","nodeType","Node","TEXT_NODE","removeChild","childInfo","infoIndex","_parseTemplate","createDocumentFragment","attrs","from","a","_parseTemplateNodeAttribute","HTMLTemplateElement","decorate","dom","importNode","__noInsertionPoint","nodes","nodeList","$","l","eventName","methodName","context","handler","_methodHost","detail","createNodeEventHandler","_addEventListenerToNode","addEventListener","removeEventListener","property_effects_dedupeId","TYPES","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","capitalAttributeRegex","ensureOwnEffectMap","effects","protoFx","instFx","runEffects","hasPaths","extraArgs","ran","runEffectsForProperty","dedupeId","fxs","fx","lastRun","pathMatchesTrigger","trigger","fn","triggerPath","structured","wildcard","runObserverEffect","method","changedProp","call","dynamicFn","notifyPath","rootProperty","dispatchNotifyEvent","queueProperty","dispatchEvent","CustomEvent","runNotifyEffect","runReflectEffect","attrName","_propertyToAttribute","runComputedEffect","result","runMethodEffect","computedProp","methodInfo","addBinding","kind","target","literal","bindings","binding","isCompound","mode","shouldAddListener","event","negate","listenerEvent","listenerNegate","part","compoundIndex","addEffectForBindingPart","dependencies","evaluator","parseArg","_addTemplatePropertyEffect","runBindingEffect","source","__isPropertyEffectsClient","_setPendingPropertyOrPath","_enqueueClient","storage","__dataCompoundStorage","computeBindingValue","_setUnmanagedPropertyToNode","applyBindingValue","_evaluateBinding","setupCompoundStorage","literals","addNotifyListener","fromProp","toPath","fromPath","currentTarget","handleNotification","createMethodEffect","sig","effectFn","static","arg","_addPropertyEffect","_marshalArgs","apply","emptyArray","bindingRegex","RegExp","OPEN_BRACKET","literalFromParts","s","parseMethod","expression","match","argList","rawArg","parseArgs","fc","getArgValue","data","notifySplices","array","splices","indexSplices","notifySplice","addedCount","removed","object","property_effects_PropertyEffects","propertyEffectsBase","__dataCounter","__dataClientsReady","__dataPendingClients","__dataToNotify","__dataLinkedPaths","__dataHasPaths","__dataHost","__dataTemp","__dataClientsInitialized","__computeEffects","__reflectEffects","__notifyEffects","__propagateEffects","__observeEffects","__readOnly","__templateInfo","PROPERTY_EFFECT_TYPES","hostStack","registerHost","effect","_hasPropertyEffect","shouldNotify","isPathNotification","links","link","b","computeLinkedPaths","propIsPath","prevProps","client","__enableOrFlushClients","_readyClients","clients","_enableProperties","setReadOnly","_flushClients","computeEffects","inputProps","runComputedEffects","notifyProps","_propagatePropertyChanges","notified","host","runNotifyEffects","propertyEffects","nextTemplateInfo","to","items","ret","hadLength","pop","start","deleteCount","Math","floor","shift","unshift","propPath","protectedSetter","values","matches","pathValue","_createPropertyObserver","_createMethodObserver","_createNotifyingProperty","_createReadOnlyProperty","_createReflectedProperty","_createComputedProperty","_bindTemplate","instanceBinding","wasPreBound","__templateInfoLast","previousTemplateInfo","hostProps","beginHosting","_stampTemplate","endHosting","childNodes","setupBindings","_parseBindings","origName","text","lastIndex","exec","customEvent","notifyEvent","colon","signature","dynamicFns","stack","stackLen","registrations","properties_mixin_PropertiesMixin","superPropertiesClass","superCtor","PropertiesMixin","ownProperties","properties","output","o","normalizeProperties","__ownProperties","_properties","__observedAttributes","keys","finalize","__finalized","_finalizeClass","createProperties","__properties","instanceCount","connectedCallback","disconnectedCallback","version","builtCSS","ElementMixin","polymerElementBase","processElementStyles","klass","templateStyles","stylesWithImports","linkedStyles","stylesFromModuleImports","firstTemplateChild","firstElementChild","_processStyleText","insertBefore","templateStyleIndex","templateStyle","cloneNode","prepareTemplate","polymerElementVersion","observers","__ownObservers","createObservers","_prepareTemplate","error","_template","allProps","computed","_hasReadOnlyEffect","reflectToAttribute","_hasReflectEffect","notify","_hasNotifyEffect","observer","getTemplateFromDomModule","importPath","meta","importMeta","_importPath","_finalizeTemplate","__propertyDefaults","propertyDefaults","_hasAccessor","__polymerFinalized","styleElement","_attachDom","attachShadow","shadowRoot","ShadyDOM","flushInitial","styleSubtree","LiteralString","string","literalValue","html","strings","innerHTML","reduce","acc","v","htmlValue","polymer_element_PolymerElement","newSplice","EDIT_LEAVE","EDIT_UPDATE","EDIT_ADD","EDIT_DELETE","calcSplices","current","currentStart","currentEnd","oldStart","oldEnd","prefixCount","suffixCount","minLength","min","searchLength","equals","sharedPrefix","index1","index2","count","sharedSuffix","ops","distances","edits","northWest","west","north","reverse","spliceOperationsFromEditDistances","rowCount","columnCount","calcEditDistances","oldIndex","currentValue","previousValue","isSlot","FlattenedNodesObserver","wrapped","assignedNodes","flatten","concat","_shadyChildrenObserver","_nativeChildrenObserver","_connected","_target","_effectiveNodes","_observer","_scheduled","_boundSchedule","_schedule","connect","_listenSlots","children","observeChildren","mutations","_processMutations","childList","_unlistenSlots","unobserveChildren","disconnect","flush","_processSlotMutations","mutation","addedNodes","removedNodes","takeRecords","newNodes","getFlattenedNodes","previous","didFlush","oneDark","theme","copyClipboardButton","render","_themeCanBeChanged","previousTheme","tagName","_updateContent","_code","_demo","demo","_getCodeTemplate","_highlight","ELEMENT_NODE","classList","add","_entitize","_cleanIndentation","code","hljs","highlightBlock","pattern","copyButton","textarea","_textAreaWithClonedContent","select","execCommand","err","remove","directives","directive_directive","f","d","isDirective","has","isCEPolyfill","polyfillWrapFlushCallback","reparentNodes","container","end","before","removeNodes","startNode","endNode","noChange","nothing","marker","random","nodeMarker","markerRegex","boundAttributeSuffix","Template","partIndex","nodesToRemove","lastPartIndex","nextNode","stringForPart","lastAttributeNameRegex","attributeLookupName","createMarker","previousSibling","isTemplatePartActive","createComment","template_instance_TemplateInstance","processor","options","_parts","setValue","commit","fragment","nodeIndex","_prepareInstance","handleTextExpression","insertAfterNode","handleAttributeExpressions","nodeName","adoptNode","upgrade","template_result_TemplateResult","endIndex","substr","getHTML","template_result_SVGTemplateResult","getTemplateElement","svgElement","isPrimitive","AttributeCommitter","dirty","_createPart","parts_AttributePart","Symbol","iterator","_getValue","comitter","committer","directive","parts_NodePart","_pendingValue","ref","_insert","_commitText","_commitTemplateResult","_commitNode","_commitIterable","clear","templateFactory","update","instance","_clone","itemParts","itemPart","appendIntoPart","insertAfterPart","parts_BooleanAttributePart","PropertyCommitter","single","PropertyPart","eventOptionsSupported","capture","_e","parts_EventPart","eventContext","_boundHandleEvent","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","_options","getOptions","default_template_processor_DefaultTemplateProcessor","prefix","defaultTemplateProcessor","templateCache","templateCaches","stringsArray","keyString","Map","key","render_parts","appendInto","__webpack_exports__","lit_html_html","svg","history","pushState","_routes","_useHash","_hash","_paused","_destroyed","_lastRouteResolved","_notFoundHandler","_defaultHandler","_usePushState","_onLocationChange","bind","_genericHooks","_historyAPIUpdateMethod","_cLoc","_listen","updatePageLinks","r","regexp","PARAMETER_REGEXP","REPLACE_VARIABLE_REGEXP","WILDCARD_REGEXP","REPLACE_WILDCARD","FOLLOWED_BY_SLASH_REGEXP","MATCH_REGEXP_FLAGS","paramNames","route","h","decodeURIComponent","params","after","helpers","clean","getOnlyURL","navigate","_getRoot","resolve","on","hooks","uses","_add","sort","forEach","off","notFound","query","already","_callLeave","destroy","clearTimeout","_listeningInterval","_findLinks","hasListenerAttached","ctrlKey","metaKey","getLinkPath","preventDefault","generate","pause","resume","historyAPIUpdateMethod","disableIfAPINotAvailable","lastRouteResolved","encodeURI","as","__NAVIGO_WINDOW_LOCATION_MOCK__","leave","__importDefault","mod","__esModule","default","lit_html_1","shadow_css_1","camel_to_kebab_1","camelcase_1","scheduler_1","Json","elementName","component","GhElement","beforeRender","_effectsIndex","_statesIndex","_beforeRender","useCallback","useEffect","useMemo","useState","newStyles","innerText","afterRender","_afterRender","deps","lastEffect","_effects","diffDeps","cleanup","initialValue","_states","newValue","invalidate","memo","_memosIndex","first","_memos","async","_needsUpdate","schedule","attributeName","oldValue","propertyName","find","declaration","propertyKey","c","camelToKebabCase","upper","numeric","ch","chLower","prev","camelCase","input","TypeError","pascalCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","preserveCamelCase","charAt","postProcess","_","p1","needsUpdate","queue","task","requestAnimationFrame","k","nodeValue","offset","E","g","cached_variants","eW","cI","compiled","bK","lR","bR","eR","tE","iR","starts","endsParent","N","I","classPrefix","C","L","sL","y","B","top","language","cN","skip","eB","rB","rE","eE","w","R","M","O","T","message","languages","second_best","tabReplace","useBR","className","createElementNS","re","called","highlight","highlightAuto","fixMarkup","configure","initHighlighting","initHighlightingOnLoad","registerLanguage","aliases","listLanguages","getLanguage","inherit","IR","UIR","NR","CNR","BNR","RSR","BE","ASM","QSM","PWM","CLCM","CBCM","HCM","NM","CNM","BNM","CSSNM","RM","TM","UTM","METHOD_GUARD","keyword","built_in"],"mappings":"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","file":"build/chunk.vendors~main.e442c1e3ee2aa9680802.js","sourcesContent":["\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n__export(require(\"./gh-element\"));\r\n__export(require(\"./types\"));\r\n//# sourceMappingURL=index.js.map","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* eslint-disable no-unused-vars */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]\n * We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.\n *\n * @param {string} prop Property name\n * @param {?Object} obj Reference object\n * @return {string} Potentially renamed property name\n */\nwindow.JSCompiler_renameProperty = function(prop, obj) {\n  return prop;\n};\n/* eslint-enable */\n\nexport {};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * Note that this function performs no resolution for URLs that start\n * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n * URL resolution, use `window.URL`.\n *\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nexport function resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return (new URL(url, baseURI)).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nexport function resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nexport function pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { pathFromUrl } from './resolve-url.js';\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\n\n\n/**\n * Globally settable property that is automatically assigned to\n * `ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `rootPath` to provide a stable application mount path when\n * using client side routing.\n */\nexport let rootPath = pathFromUrl(document.baseURI || window.location.href);\n\n/**\n * Sets the global rootPath property used by `ElementMixin` and\n * available via `rootPath`.\n *\n * @param {string} path The new root path\n * @return {void}\n */\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM.\n * The callback signature is:\n *\n *  function sanitizeDOMValue(value, name, type, node) { ... }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n */\nexport let sanitizeDOMValue = window.Polymer && window.Polymer.sanitizeDOMValue || undefined;\n\n/**\n * Sets the global sanitizeDOMValue available via this module's exported\n * `sanitizeDOMValue` variable.\n *\n * @param {(function(*,string,string,Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback\n * @return {void}\n */\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n/**\n * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.\n * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother\n * scrolling performance.\n * Defaults to `false` for backwards compatibility.\n */\nexport let passiveTouchGestures = false;\n\n/**\n * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.\n *\n * @param {boolean} usePassive enable or disable passive touch gestures globally\n * @return {void}\n */\nexport const setPassiveTouchGestures = function(usePassive) {\n  passiveTouchGestures = usePassive;\n};\n\n/**\n * Setting to ensure Polymer template evaluation only occurs based on tempates\n * defined in trusted script.  When true, `<dom-module>` re-registration is\n * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`\n * templates will only evaluate in the context of a trusted element template.\n */\nexport let strictTemplatePolicy = false;\n\n/**\n * Sets `strictTemplatePolicy` globally for all elements\n *\n * @param {boolean} useStrictPolicy enable or disable strict template policy\n *   globally\n * @return {void}\n */\nexport const setStrictTemplatePolicy = function(useStrictPolicy) {\n  strictTemplatePolicy = useStrictPolicy;\n};\n\n/**\n * Setting to enable dom-module lookup from Polymer.Element.  By default,\n * templates must be defined in script using the `static get template()`\n * getter and the `html` tag function.  To enable legacy loading of templates\n * via dom-module, set this flag to true.\n */\nexport let allowTemplateFromDomModule = false;\n\n/**\n * Sets `lookupTemplateFromDomModule` globally for all elements\n *\n * @param {boolean} allowDomModule enable or disable template lookup\n *   globally\n * @return {void}\n */\nexport const setAllowTemplateFromDomModule = function(allowDomModule) {\n  allowTemplateFromDomModule = allowDomModule;\n};\n\n/**\n * Setting to skip processing style includes and re-writing urls in css styles.\n * Normally \"included\" styles are pulled into the element and all urls in styles\n * are re-written to be relative to the containing script url.\n * If no includes or relative urls are used in styles, these steps can be\n * skipped as an optimization.\n */\nexport let legacyOptimizations = false;\n\n/**\n * Sets `legacyOptimizations` globally for all elements to enable optimizations\n * when only legacy based elements are used.\n *\n * @param {boolean} useLegacyOptimizations enable or disable legacy optimizations\n * includes and url rewriting\n * @return {void}\n */\nexport const setLegacyOptimizations = function(useLegacyOptimizations) {\n  legacyOptimizations = useLegacyOptimizations;\n};\n\n/**\n * Setting to perform initial rendering synchronously when running under ShadyDOM.\n * This matches the behavior of Polymer 1.\n */\nexport let syncInitialRender = false;\n\n/**\n * Sets `syncInitialRender` globally for all elements to enable synchronous\n * initial rendering.\n *\n * @param {boolean} useSyncInitialRender enable or disable synchronous initial\n * rendering globally.\n * @return {void}\n */\nexport const setSyncInitialRender = function(useSyncInitialRender) {\n  syncInitialRender = useSyncInitialRender;\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n * @private\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\n/* eslint-disable valid-jsdoc */\n/**\n * Wraps an ES6 class expression mixin such that the mixin is only applied\n * if it has not already been applied its base argument. Also memoizes mixin\n * applications.\n *\n * @template T\n * @param {T} mixin ES6 class expression mixin to wrap\n * @return {T}\n * @suppress {invalidCasts}\n */\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n/* eslint-enable valid-jsdoc */\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\n\nlet modules = {};\nlet lcModules = {};\n/**\n * Sets a dom-module into the global registry by id.\n *\n * @param {string} id dom-module id\n * @param {DomModule} module dom-module instance\n * @return {void}\n */\nfunction setModule(id, module) {\n  // store id separate from lowercased id so that\n  // in all cases mixedCase id will stored distinctly\n  // and lowercase version is a fallback\n  modules[id] = lcModules[id.toLowerCase()] = module;\n}\n/**\n * Retrieves a dom-module from the global registry by id.\n *\n * @param {string} id dom-module id\n * @return {DomModule!} dom-module instance\n */\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   *\n   * @export\n   * @nocollapse Referred to indirectly in style-gather.js\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   * @override\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      // Under strictTemplatePolicy, reject and null out any re-registered\n      // dom-module since it is ambiguous whether first-in or last-in is trusted\n      if (strictTemplatePolicy && findModule(id) !== undefined) {\n        setModule(id, null);\n        throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`);\n      }\n      this.id = id;\n      setModule(id, this);\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n\nimport { DomModule } from '../elements/dom-module.js';\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\n/**\n * @param {string} moduleId .\n * @return {?DomModule} .\n */\nfunction importModule(moduleId) {\n  return /** @type {?DomModule} */(DomModule.import(moduleId));\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = /** @type {?HTMLTemplateElement} */(\n        m.querySelector('template'));\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string=} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent =\n            resolveCss(e.textContent, /** @type {string} */ (baseURI));\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = /** @type {?HTMLTemplateElement} */(m.querySelector('template'));\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n  let cssText = '';\n  let styles = _stylesFromModuleImports(module);\n  for (let i=0; i < styles.length; i++) {\n    cssText += styles[i].textContent;\n  }\n  return cssText;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/* eslint-disable valid-jsdoc */\n/**\n * Node wrapper to ensure ShadowDOM safe operation regardless of polyfill\n * presence or mode. Note that with the introduction of `ShadyDOM.noPatch`,\n * a node wrapper must be used to access ShadowDOM API.\n * This is similar to using `Polymer.dom` but relies exclusively\n * on the presence of the ShadyDOM polyfill rather than requiring the loading\n * of legacy (Polymer.dom) API.\n * @type {function(Node):Node}\n */\nexport const wrap = (window['ShadyDOM'] && window['ShadyDOM']['noPatch'] && window['ShadyDOM']['wrap']) ?\n  window['ShadyDOM']['wrap'] : (n) => n;\n\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Module with utilities for manipulating structured data path strings.\n *\n * @summary Module with utilities for manipulating structured data path strings.\n */\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * Example:\n *\n * ```\n * isPath('foo.bar.baz') // true\n * isPath('foo')         // false\n * ```\n *\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\n/**\n * Returns the root property name for the given path.\n *\n * Example:\n *\n * ```\n * root('foo.bar.baz') // 'foo'\n * root('foo')         // 'foo'\n * ```\n *\n * @param {string} path Path string\n * @return {string} Root property name\n */\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\n/**\n * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n * Returns true if the given path is an ancestor of the base path.\n *\n * Example:\n *\n * ```\n * isAncestor('foo.bar', 'foo')         // true\n * isAncestor('foo.bar', 'foo.bar')     // false\n * isAncestor('foo.bar', 'foo.bar.baz') // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is an ancestor of `base`.\n */\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\n/**\n * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n *\n * Example:\n *\n * ```\n * isDescendant('foo.bar', 'foo.bar.baz') // true\n * isDescendant('foo.bar', 'foo.bar')     // false\n * isDescendant('foo.bar', 'foo')         // false\n * ```\n *\n * @param {string} base Path string to test against.\n * @param {string} path Path string to test.\n * @return {boolean} True if `path` is a descendant of `base`.\n */\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\n/**\n * Replaces a previous base path with a new base path, preserving the\n * remainder of the path.\n *\n * User must ensure `path` has a prefix of `base`.\n *\n * Example:\n *\n * ```\n * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'\n * ```\n *\n * @param {string} base Current base string to remove\n * @param {string} newBase New base string to replace with\n * @param {string} path Path to translate\n * @return {string} Translated string\n */\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\n/**\n * @param {string} base Path string to test against\n * @param {string} path Path string to test\n * @return {boolean} True if `path` is equal to `base`\n */\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\n/**\n * Converts array-based paths to flattened path.  String-based paths\n * are returned as-is.\n *\n * Example:\n *\n * ```\n * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {string} Flattened path\n */\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\n/**\n * Splits a path into an array of property names. Accepts either arrays\n * of path parts or strings.\n *\n * Example:\n *\n * ```\n * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n * ```\n *\n * @param {string | !Array<string|number>} path Input path\n * @return {!Array<string>} Array of path parts\n * @suppress {checkTypes}\n */\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\n/**\n * Reads a value from a path.  If any sub-property in the path is `undefined`,\n * this method returns `undefined` (will never throw.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to read\n * @param {Object=} info If an object is provided to `info`, the normalized\n *  (flattened) path will be set to `info.path`.\n * @return {*} Value at path, or `undefined` if the path could not be\n *  fully dereferenced.\n */\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\n/**\n * Sets a value to a path.  If any sub-property in the path is `undefined`,\n * this method will no-op.\n *\n * @param {Object} root Object from which to dereference path from\n * @param {string | !Array<string|number>} path Path to set\n * @param {*} value Value to set to path\n * @return {string | undefined} The normalized version of the input path\n */\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\n/**\n * Returns true if the given string is a structured data path (has dots).\n *\n * This function is deprecated.  Use `isPath` instead.\n *\n * Example:\n *\n * ```\n * isDeep('foo.bar.baz') // true\n * isDeep('foo')         // false\n * ```\n *\n * @deprecated\n * @param {string} path Path string\n * @return {boolean} True if the string contained one or more dots\n */\nexport const isDeep = isPath;\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\n/**\n * @fileoverview Module with utilities for converting between \"dash-case\" and\n * \"camelCase\" identifiers.\n */\n\n/**\n * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n * (e.g. `fooBarBaz`).\n *\n * @param {string} dash Dash-case identifier\n * @return {string} Camel-case representation of the identifier\n */\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\n/**\n * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n * (e.g. `foo-bar-baz`).\n *\n * @param {string} camel Camel-case identifier\n * @return {string} Dash-case representation of the identifier\n */\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * @fileoverview\n *\n * This module provides a number of strategies for enqueuing asynchronous\n * tasks. Each sub-module provides a standard `run(fn)` interface that returns a\n * handle, and a `cancel(handle)` interface for canceling async tasks before\n * they run.\n *\n * @summary Module that provides a number of strategies for enqueuing\n * asynchronous tasks.\n */\n\nimport './boot.js';\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\n/**\n * Async interface wrapper around `setTimeout`.\n *\n * @namespace\n * @summary Async interface wrapper around `setTimeout`.\n */\nconst timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof timeOut\n   * @param {number=} delay Time to wait before calling callbacks in ms\n   * @return {!AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return {\n      run(fn) { return window.setTimeout(fn, delay); },\n      cancel(handle) {\n        window.clearTimeout(handle);\n      }\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof timeOut\n   * @param {!Function} fn Callback to run\n   * @param {number=} delay Delay in milliseconds\n   * @return {number} Handle used for canceling task\n   */\n  run(fn, delay) {\n    return window.setTimeout(fn, delay);\n  },\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.clearTimeout(handle);\n  }\n};\nexport {timeOut};\n\n/**\n * Async interface wrapper around `requestAnimationFrame`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestAnimationFrame`.\n */\nconst animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof animationFrame\n   * @param {function(number):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestAnimationFrame(fn);\n  },\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof animationFrame\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelAnimationFrame(handle);\n  }\n};\nexport {animationFrame};\n\n/**\n * Async interface wrapper around `requestIdleCallback`.  Falls back to\n * `setTimeout` on browsers that do not support `requestIdleCallback`.\n *\n * @namespace\n * @summary Async interface wrapper around `requestIdleCallback`.\n */\nconst idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof idlePeriod\n   * @param {function(!IdleDeadline):void} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\nexport {idlePeriod};\n\n/**\n * Async interface for enqueuing callbacks that run at microtask timing.\n *\n * Note that microtask timing is achieved via a single `MutationObserver`,\n * and thus callbacks enqueued with this API will all run in a single\n * batch, and not interleaved with other microtasks such as promises.\n * Promises are avoided as an implementation choice for the time being\n * due to Safari bugs that cause Promises to lack microtask guarantees.\n *\n * @namespace\n * @summary Async interface for enqueuing callbacks that run at microtask\n *   timing.\n */\nconst microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof microTask\n   * @param {!Function=} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   * @return {void}\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\nexport {microTask};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { microTask } from '../utils/async.js';\nimport { wrap } from '../utils/wrap.js';\n\n/** @const {!AsyncInterface} */\nconst microtask = microTask;\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin, call `MyClass.createProperties(props)`\n * once at class definition time to create property accessors for properties\n * named in props, implement `_propertiesChanged` to react as desired to\n * property changes, and implement `static get observedAttributes()` and\n * include lowercase versions of any property names that should be set from\n * attributes. Last, call `this._enableProperties()` in the element's\n * `connectedCallback` to enable the accessors.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertiesChanged = dedupingMixin(\n    /**\n     * @template T\n     * @param {function(new:T)} superClass Class to apply mixin to.\n     * @return {function(new:T)} superClass with mixin applied.\n     */\n    (superClass) => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   */\n  class PropertiesChanged extends superClass {\n\n    /**\n     * Creates property accessors for the given property names.\n     * @param {!Object} props Object whose keys are names of accessors.\n     * @return {void}\n     * @protected\n     */\n    static createProperties(props) {\n      const proto = this.prototype;\n      for (let prop in props) {\n        // don't stomp an existing accessor\n        if (!(prop in proto)) {\n          proto._createPropertyAccessor(prop);\n        }\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * The attribute name is the lowercased property name. Override to\n     * customize this mapping.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return property.toLowerCase();\n    }\n\n    /**\n     * Override point to provide a type to which to deserialize a value to\n     * a given property.\n     * @param {string} name Name of property\n     *\n     * @protected\n     */\n    static typeForProperty(name) { } //eslint-disable-line no-unused-vars\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _createPropertyAccessor(property, readOnly) {\n      this._addPropertyToAttributeMap(property);\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        this._definePropertyAccessor(property, readOnly);\n      }\n    }\n\n    /**\n     * Adds the given `property` to a map matching attribute names\n     * to property names, using `attributeNameForProperty`. This map is\n     * used when deserializing attribute values to properties.\n     *\n     * @param {string} property Name of the property\n     * @override\n     */\n    _addPropertyToAttributeMap(property) {\n      if (!this.hasOwnProperty('__dataAttributes')) {\n        this.__dataAttributes = Object.assign({}, this.__dataAttributes);\n      }\n      if (!this.__dataAttributes[property]) {\n        const attr = this.constructor.attributeNameForProperty(property);\n        this.__dataAttributes[attr] = property;\n      }\n    }\n\n    /**\n     * Defines a property accessor for the given property.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     * @return {void}\n     * @override\n     */\n     _definePropertyAccessor(property, readOnly) {\n      Object.defineProperty(this, property, {\n        /* eslint-disable valid-jsdoc */\n        /** @this {PropertiesChanged} */\n        get() {\n          return this._getProperty(property);\n        },\n        /** @this {PropertiesChanged} */\n        set: readOnly ? function () {} : function (value) {\n          this._setProperty(property, value);\n        }\n        /* eslint-enable */\n      });\n    }\n\n    constructor() {\n      super();\n      /** @protected {boolean} */\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      this.__dataInstanceProps = null;\n      this.__serializing = false;\n      this._initializeProperties();\n    }\n\n    /**\n     * Lifecycle callback called when properties are enabled via\n     * `_enableProperties`.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its property data initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @return {void}\n     * @public\n     * @override\n     */\n    ready() {\n      this.__dataReady = true;\n      this._flushProperties();\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProperties() {\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Returns the value for the given property.\n     * @param {string} property Name of property\n     * @return {*} Value for the given property\n     * @protected\n     * @override\n     */\n    _getProperty(property) {\n      return this.__data[property];\n    }\n\n    /* eslint-disable no-unused-vars */\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} ext Not used here; affordance for closure\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     * @override\n     */\n    _setPendingProperty(property, value, ext) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n    /* eslint-enable */\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _flushProperties() {\n      const props = this.__data;\n      const changedProps = this.__dataPending;\n      const old = this.__dataOld;\n      if (this._shouldPropertiesChange(props, changedProps, old)) {\n        this.__dataPending = null;\n        this.__dataOld = null;\n        this._propertiesChanged(props, changedProps, old);\n      }\n    }\n\n    /**\n     * Called in `_flushProperties` to determine if `_propertiesChanged`\n     * should be called. The default implementation returns true if\n     * properties are pending. Override to customize when\n     * `_propertiesChanged` is called.\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {boolean} true if changedProps is truthy\n     * @override\n     */\n    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      return Boolean(changedProps);\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` if a strict equality\n     * check fails. The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     * @override\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n          // This ensures (old==NaN, value==NaN) always returns false\n          (old === old || value === value))\n      );\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     * @param {?string=} namespace Attribute namespace.\n     * @return {void}\n     * @suppress {missingProperties} Super may or may not implement the callback\n     * @override\n     */\n    attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n      if (super.attributeChangedCallback) {\n        super.attributeChangedCallback(name, old, value, namespace);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to, defaults to the value\n     * returned from `typeForProperty`\n     * @return {void}\n     * @override\n     */\n    _attributeToProperty(attribute, value, type) {\n      if (!this.__serializing) {\n        const map = this.__dataAttributes;\n        const property = map && map[attribute] || attribute;\n        this[property] = this._deserializeValue(value, type ||\n          this.constructor.typeForProperty(property));\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is an element.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect to.\n     * @param {*=} value Property value to refect.\n     * @return {void}\n     * @override\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,\n        attribute || this.constructor.attributeNameForProperty(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @return {void}\n     * @override\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      const str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        if (attribute === 'class' || attribute === 'name' || attribute === 'slot') {\n          node = /** @type {?Element} */(wrap(node));\n        }\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called when setting JS property values to\n     * HTML attributes.  Users may override this method to provide\n     * serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided\n     * property  value.\n     * @override\n     */\n    _serializeValue(value) {\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called when reading HTML attribute values to\n     * JS properties.  Users may override this method to provide\n     * deserialization for custom `type`s. Types for `Boolean`, `String`,\n     * and `Number` convert attributes to the expected types.\n     *\n     * @param {?string} value Value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     * @override\n     */\n    _deserializeValue(value, type) {\n      switch (type) {\n        case Boolean:\n          return (value !== null);\n        case Number:\n          return Number(value);\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  return PropertiesChanged;\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @return {void}\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\n/**\n * Element class mixin that provides basic meta-programming for creating one\n * or more property accessors (getter/setter pair) that enqueue an async\n * (batched) `_propertiesChanged` callback.\n *\n * For basic usage of this mixin:\n *\n * -   Declare attributes to observe via the standard `static get\n *     observedAttributes()`. Use `dash-case` attribute names to represent\n *     `camelCase` property names.\n * -   Implement the `_propertiesChanged` callback on the class.\n * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to\n *     generate property accessors for each observed attribute. This must be\n *     called before the first instance is created, for example, by calling it\n *     before calling `customElements.define`. It can also be called lazily from\n *     the element's `constructor`, as long as it's guarded so that the call is\n *     only made once, when the first instance is created.\n * -   Call `this._enableProperties()` in the element's `connectedCallback` to\n *     enable the accessors.\n *\n * Any `observedAttributes` will automatically be\n * deserialized via `attributeChangedCallback` and set to the associated\n * property using `dash-case`-to-`camelCase` convention.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Element class mixin for reacting to property changes from\n *   generated property accessors.\n */\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertiesChanged}\n   * @unrestricted\n   * @private\n   */\n   const base = PropertiesChanged(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends {base}\n   * @unrestricted\n   */\n  class PropertyAccessors extends base {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     * @return {void}\n     */\n    static createPropertiesForAttributes() {\n      let a$ = this.observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(dashToCamelCase(a$[i]));\n      }\n    }\n\n    /**\n     * Returns an attribute name that corresponds to the given property.\n     * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.\n     * @param {string} property Property to convert\n     * @return {string} Attribute name corresponding to the given property.\n     *\n     * @protected\n     */\n    static attributeNameForProperty(property) {\n      return camelToDashCase(property);\n    }\n\n    /**\n     * Overrides PropertiesChanged implementation to initialize values for\n     * accessors created for values that already existed on the element\n     * prototype.\n     *\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProperties() {\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      super._initializeProperties();\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @return {void}\n     * @protected\n     * @override\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     * @suppress {invalidCasts} Closure can't figure out `this` is infact an\n     *     element\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     * @return {void}\n     * @override\n     */\n    _ensureAttribute(attribute, value) {\n      const el = /** @type {!HTMLElement} */(this);\n      if (!el.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(el, value, attribute);\n      }\n    }\n\n    /**\n     * Overrides PropertiesChanged implemention to serialize objects as JSON.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property\n     *     value.\n     * @override\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return super._serializeValue(value);\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     * @override\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n            outValue = value;\n          }\n          break;\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type {string} */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n        case Date:\n          outValue = isNaN(value) ? String(value) : Number(value);\n          outValue = new Date(outValue);\n          break;\n        default:\n          outValue = super._deserializeValue(value, type);\n          break;\n      }\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Overrides PropertiesChanged implementation to save existing prototype\n     * property value so that it can be reset.\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created\n     *\n     * When calling on a prototype, any overwritten values are saved in\n     * `__dataProto`, and it is up to the subclasser to decide how/when\n     * to set those properties back into the accessor.  When calling on an\n     * instance, the overwritten value is set via `_setPendingProperty`,\n     * and the user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     * @protected\n     * @return {void}\n     * @override\n     */\n    _definePropertyAccessor(property, readOnly) {\n      saveAccessorValue(this, property);\n      super._definePropertyAccessor(property, readOnly);\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     * @override\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     * @override\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\n\nconst walker = document.createTreeWalker(document, NodeFilter.SHOW_ALL,\n    null, false);\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n      t.removeAttribute(t.attributes[0].name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    walker.currentNode = parent;\n    for (let n=walker.firstChild(), i=0; n; n=walker.nextSibling()) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateContent(inst, node, nodeInfo) {\n  if (nodeInfo.templateInfo) {\n    node._templateInfo = nodeInfo.templateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\n/**\n * Element mixin that provides basic template parsing and stamping, including\n * the following template-related features for stamped templates:\n *\n * - Declarative event listeners (`on-eventname=\"listener\"`)\n * - Map of node id's to stamped node instances (`this.$.id`)\n * - Nested template content caching/removal and re-installation (performance\n *   optimization)\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides basic template parsing and stamping\n */\nexport const TemplateStamp = dedupingMixin(\n    /**\n     * @template T\n     * @param {function(new:T)} superClass Class to apply mixin to.\n     * @return {function(new:T)} superClass with mixin applied.\n     */\n    (superClass) => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        let templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          template.hasAttribute('strip-whitespace');\n        this._parseTemplateContent(template, templateInfo, {parent: null});\n      }\n      return template._templateInfo;\n    }\n\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted;\n      let element = /** @type {Element} */(node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      walker.currentNode = element;\n      if (walker.firstChild()) {\n        noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {void}\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      if (root.localName === 'script' || root.localName === 'style') {\n        return;\n      }\n      walker.currentNode = root;\n      for (let node=walker.firstChild(), parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        walker.currentNode = node;\n        next = walker.nextSibling();\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = walker.nextSibling();\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo = { parentIndex, parentInfo: nodeInfo };\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;\n        }\n        // Increment if not removed\n        walker.currentNode = node;\n        if (walker.parentNode()) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n      let content = templateInfo.content =\n        node.content.ownerDocument.createDocumentFragment();\n      content.appendChild(node.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     */\n    _stampTemplate(template) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      let templateInfo = this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateContent(this, node, info);\n        applyEventListener(this, node, info);\n      }\n      dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign\n      return dom;\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {!EventTarget} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     * @override\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!EventTarget} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     * @override\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {!EventTarget} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     * @override\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n","/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\nimport '../utils/boot.js';\nimport { wrap } from '../utils/wrap.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root, isAncestor, isDescendant, get, translate, isPath, set, normalize } from '../utils/path.js';\n/* for notify, reflect */\nimport { camelToDashCase, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\n/* for annotated effects */\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue } from '../utils/settings.js';\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\n/** @const {!RegExp} */\nconst capitalAttributeRegex = /[A-Z]/;\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (let p in effects) {\n      let protoFx = effects[p];\n      let instFx = effects[p] = Array(protoFx.length);\n      for (let i=0; i<protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {?Object} effects Object map of property-to-Array of effects\n * @param {?Object} props Bag of current property changes\n * @param {?Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(\n              inst, /** @type {!Object} */ (effects), id, prop, props, oldProps,\n              hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {!Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {?DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = /** @type {string} */ (trigger.name);\n    return (triggerPath == path) ||\n        !!(trigger.structured && isAncestor(triggerPath, path)) ||\n        !!(trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = typeof info.method === \"string\" ? inst[info.method] : info.method;\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.method + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!Polymer_PropertyEffects} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!Polymer_PropertyEffects} inst The element from which to fire the\n *     event\n * @param {string} eventName The name of the event to send\n *     ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property\n *     changed, the path that changed (optional).\n * @return {void}\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  wrap(/** @type {!HTMLElement} */(inst)).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!Polymer_PropertyEffects} inst Host element instance handling the\n *     notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @return {void}\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.currentTarget[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {?Object} changedProps Bag of changed properties\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @return {void}\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    let inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(/** @type {!Object} */ (oldProps), inst.__dataOld);\n      Object.assign(/** @type {!Object} */ (changedProps), inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {?Object} props Bag of current property changes\n * @param {?Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {void}\n * @private\n */\nfunction runComputedEffect(inst, property, props, oldProps, info) {\n  let result = runMethodEffect(inst, property, props, oldProps, info);\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!Polymer_PropertyEffects} inst The instance whose props are changing\n * @param {string} path Path that has changed\n * @param {*} value Value of changed path\n * @return {void}\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @return {void}\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n * @return {void}\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @return {void}\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__isPropertyEffectsClient &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    applyBindingValue(inst, node, binding, part, value);\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!Polymer_PropertyEffects} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @return {void}\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__isPropertyEffectsClient &&\n        node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else  {\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (binding.target === 'value' &&\n          (node.localName === 'input' || node.localName === 'textarea'))) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!Polymer_PropertyEffects} inst Instance that bas been previously\n *     bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @return {void}\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!Polymer_PropertyEffects} inst Host element instance to handle\n *     notification event\n * @param {Binding} binding Binding metadata\n * @return {void}\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @return {void}\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = inst._marshalArgs(info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root(arg);\n    // detect structured path (has dots)\n    a.structured = isPath(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\nfunction getArgValue(data, props, path) {\n  let value = get(data, path);\n  // when data is not stored e.g. `splices`, get the value from changedProps\n  // TODO(kschaaf): Note, this can cause a rare issue where the wildcard\n  // info.value could pull a stale value out of changedProps during a reentrant\n  // change that sets the value back to undefined.\n  // https://github.com/Polymer/polymer/issues/5479\n  if (value === undefined) {\n    value = props[path];\n  }\n  return value;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @return {void}\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  inst.notifyPath(path + '.splices', { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!Polymer_PropertyEffects} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @return {void}\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\n/**\n * Element class mixin that provides meta-programming for Polymer's template\n * binding and data observation (collectively, \"property effects\") system.\n *\n * This mixin uses provides the following key static methods for adding\n * property effects to an element class:\n * - `addPropertyEffect`\n * - `createPropertyObserver`\n * - `createMethodObserver`\n * - `createNotifyingProperty`\n * - `createReadOnlyProperty`\n * - `createReflectedProperty`\n * - `createComputedProperty`\n * - `bindTemplate`\n *\n * Each method creates one or more property accessors, along with metadata\n * used by this mixin's implementation of `_propertiesChanged` to perform\n * the property effects.\n *\n * Underscored versions of the above methods also exist on the element\n * prototype for adding property effects on instances at runtime.\n *\n * Note that this mixin overrides several `PropertyAccessors` methods, in\n * many cases to maintain guarantees provided by the Polymer 1.x features;\n * notably it changes property accessors to be synchronous by default\n * whereas the default when using `PropertyAccessors` standalone is to be\n * async by default.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin TemplateStamp\n * @appliesMixin PropertyAccessors\n * @summary Element class mixin that provides meta-programming for Polymer's\n * template binding and data observation system.\n */\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   * @private\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      // Used to identify users of this mixin, ala instanceof\n      this.__isPropertyEffectsClient = true;\n      /** @type {number} */\n      // NOTE: used to track re-entrant calls to `_flushProperties`\n      // path changes dirty check against `__dataTemp` only during one \"turn\"\n      // and are cleared when `__dataCounter` returns to 0.\n      this.__dataCounter = 0;\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object|null} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    /**\n     * @override\n     * @return {void}\n     */\n    _initializeProperties() {\n      super._initializeProperties();\n      hostStack.registerHost(this);\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     * @return {void}\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     * @return {void}\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @override\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     * @return {void}\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to\n     * attribute\" property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this\n     *     type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @override\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get(this, path);\n          path = /** @type {string} */ (set(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, /**@type{string}*/ (path), value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @override\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertiesChanged` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChanged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let propIsPath = this.__dataHasPaths && isPath(property);\n      let prevProps = propIsPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (propIsPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (propIsPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {void}\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     * @return {void}\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @override\n     * @param {Object} client PropertyEffects client to enqueue\n     * @return {void}\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Overrides superclass implementation.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _flushProperties() {\n      this.__dataCounter++;\n      super._flushProperties();\n      this.__dataCounter--;\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @override\n     * @return {void}\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @override\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @return {void}\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     * @return {void}\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @override\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {?Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {?Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @return {void}\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      let notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @override\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {void}\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      let templateInfo = this.__templateInfo;\n      while (templateInfo) {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        templateInfo = templateInfo.nextTemplateInfo;\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @override\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @return {void}\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @return {void}\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1,\n     *         object: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1,\n     *         object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     *\n     * @override\n     * @return {void}\n     * @public\n     */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @override\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @return {void}\n     * @public\n     */\n    set(path, value, root) {\n      if (root) {\n        set(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number=} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else if (start) {\n        start = Math.floor(start);\n      }\n      // array.splice does different things based on the number of arguments\n      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)\n      // do different things. In the former, the whole array is cleared. In the\n      // latter, no items are removed.\n      // This means that we need to detect whether 1. one of the arguments\n      // is actually passed in and then 2. determine how many arguments\n      // we should pass on to the native array.splice\n      //\n      let ret;\n      // Omit any additional arguments if they were not passed in\n      if (arguments.length === 2) {\n        ret = array.splice(start);\n      // Either start was undefined and the others were defined, but in this\n      // case we can safely pass on all arguments\n      //\n      // Note: this includes the case where none of the arguments were passed in,\n      // e.g. this.splice('array'). However, if both start and deleteCount\n      // are undefined, array.splice will not modify the array (as expected)\n      } else {\n        ret = array.splice(start, deleteCount, ...items);\n      }\n      // At the end, check whether any items were passed in (e.g. insertions)\n      // or if the return array contains items (e.g. deletions).\n      // Only notify if items were added or deleted.\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @override\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @override\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @return {void}\n     * @public\n     */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method\n     *     to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createPropertyObserver(property, method, dynamicFn) {\n      let info = { property, method, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: method}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _createReflectedProperty(property) {\n      let attr = this.constructor.attributeNameForProperty(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @override\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n    }\n\n    /**\n     * Gather the argument values for a method specified in the provided array\n     * of argument metadata.\n     *\n     * The `path` and `value` arguments are used to fill in wildcard descriptor\n     * when the method is being called as a result of a path notification.\n     *\n     * @param {!Array<!MethodArg>} args Array of argument metadata\n     * @param {string} path Property/path name that triggered the method effect\n     * @param {Object} props Bag of current property changes\n     * @return {Array<*>} Array of argument values\n     * @private\n     */\n    _marshalArgs(args, path, props) {\n      const data = this.__data;\n      const values = [];\n      for (let i=0, l=args.length; i<l; i++) {\n        let {name, structured, wildcard, value, literal} = args[i];\n        if (!literal) {\n          if (wildcard) {\n            const matches = isDescendant(name, path);\n            const pathValue = getArgValue(data, props, matches ? path : name);\n            value = {\n              path: matches ? path : name,\n              value: pathValue,\n              base: matches ? get(data, name) : pathValue\n            };\n          } else {\n            value = structured ? getArgValue(data, props, name) : data[name];\n          }\n        }\n        values[i] = value;\n      }\n      return values;\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string|function(*,*)} method Function or name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createPropertyObserver(property, method, dynamicFn) {\n      this.prototype._createPropertyObserver(property, method, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal JavaScript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     * @return {void}\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @return {void}\n     * @protected\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @return {void}\n     * @protected\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal JavaScript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @return {void}\n     * @protected\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {!TemplateInfo} Template metadata object\n     * @protected\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @override\n     * @param {!HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     *   \"prototypical\" binding of the template and overwrites any previously\n     *   bound template for the class. When true (as passed from\n     *   `_stampTemplate`), the template info is instanced and linked into\n     *   the list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     *   this is an instance of the prototypical template info\n     * @protected\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__templateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into list of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!wasPreBound && this.__templateInfo) {\n          let last = this.__templateInfoLast || this.__templateInfo;\n          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n          templateInfo.previousTemplateInfo = last;\n          return templateInfo;\n        }\n      }\n      return this.__templateInfo = templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template) {\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.beginHosting(this);\n      let dom = super._stampTemplate(template);\n      hostStack.endHosting(this);\n      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes if already booted\n      if (this.__dataReady) {\n        runEffects(this, templateInfo.propertyEffects, this.__data, null,\n          false, templateInfo.nodeList);\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @override\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @return {void}\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info\n      let templateInfo = dom.templateInfo;\n      if (templateInfo.previousTemplateInfo) {\n        templateInfo.previousTemplateInfo.nextTemplateInfo =\n          templateInfo.nextTemplateInfo;\n      }\n      if (templateInfo.nextTemplateInfo) {\n        templateInfo.nextTemplateInfo.previousTemplateInfo =\n          templateInfo.previousTemplateInfo;\n      }\n      if (this.__templateInfoLast == templateInfo) {\n        this.__templateInfoLast = templateInfo.previousTemplateInfo;\n      }\n      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) omit an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        // The only way we see a capital letter here is if the attr has\n        // a capital letter in it per spec. In this case, to make sure\n        // this binding works, we go ahead and make the binding to the attribute.\n        if (capitalAttributeRegex.test(name)) {\n          kind = 'attribute';\n        } else if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          // Ensure a ShadyCSS template scoped style is not removed\n          // when a class$ binding's initial literal value is set.\n          if (name == 'class' && node.hasAttribute('class')) {\n            literal += ' ' + node.getAttribute(name);\n          }\n          node.setAttribute(name, literal);\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n      // Merge host props into outer template and add bindings\n      let hostProps = nodeInfo.templateInfo.hostProps;\n      let mode = '{';\n      for (let source in hostProps) {\n        let parts = [{ mode, source, dependencies: [source] }];\n        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * The default implementation uses a regular expression for best\n     * performance. However, the regular expression uses a white-list of\n     * allowed characters in a data-binding, which causes problems for\n     * data-bindings that do use characters not in this white-list.\n     *\n     * Instead of updating the white-list with all allowed characters,\n     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)\n     * that uses a state machine instead. This state machine is able to handle\n     * all characters. However, it is slightly less performant, therefore we\n     * extracted it into a separate optional mixin.\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {!Polymer_PropertyEffects} inst Element that should be used as\n     *     scope for binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get(inst, part.source);\n      } else {\n        if (hasPaths && isPath(path)) {\n          value = get(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  return PropertyEffects;\n});\n\n/**\n * Helper api for enqueuing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nclass HostStack {\n  constructor() {\n    this.stack = [];\n  }\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @return {void}\n   */\n  registerHost(inst) {\n    if (this.stack.length) {\n      let host = this.stack[this.stack.length-1];\n      host._enqueueClient(inst);\n    }\n  }\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @return {void}\n   */\n  beginHosting(inst) {\n    this.stack.push(inst);\n  }\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @return {void}\n   */\n  endHosting(inst) {\n    let stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen-1] == inst) {\n      this.stack.pop();\n    }\n  }\n}\nconst hostStack = new HostStack();\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Total number of Polymer element instances created.\n * @type {number}\n */\nexport let instanceCount = 0;\n\nexport function incrementInstanceCount() {\n  instanceCount++;\n}\n\n/**\n * Array of Polymer element classes that have been finalized.\n * @type {!Array<!PolymerElementConstructor>}\n */\nexport const registrations = [];\n\n/**\n * @param {!PolymerElementConstructor} prototype Element prototype to log\n * @private\n */\nfunction _regLog(prototype) {\n  console.log('[' + /** @type {?} */(prototype).is + ']: registered');\n}\n\n/**\n * Registers a class prototype for telemetry purposes.\n * @param {!PolymerElementConstructor} prototype Element prototype to register\n * @protected\n */\nexport function register(prototype) {\n  registrations.push(prototype);\n}\n\n/**\n * Logs all elements registered with an `is` to the console.\n * @public\n */\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { register, incrementInstanceCount } from '../utils/telemetry.js';\nimport { PropertiesChanged } from './properties-changed.js';\n\n/**\n * Creates a copy of `props` with each property normalized such that\n * upgraded it is an object with at least a type property { type: Type}.\n *\n * @param {Object} props Properties to normalize\n * @return {Object} Copy of input `props` with normalized properties that\n * are in the form {type: Type}\n * @private\n */\nfunction normalizeProperties(props) {\n  const output = {};\n  for (let p in props) {\n    const o = props[p];\n    output[p] = (typeof o === 'function') ? {type: o} : o;\n  }\n  return output;\n}\n\n/**\n * Mixin that provides a minimal starting point to using the PropertiesChanged\n * mixin by providing a mechanism to declare properties in a static\n * getter (e.g. static get properties() { return { foo: String } }). Changes\n * are reported via the `_propertiesChanged` method.\n *\n * This mixin provides no specific support for rendering. Users are expected\n * to create a ShadowRoot and put content into it and update it in whatever\n * way makes sense. This can be done in reaction to properties changing by\n * implementing `_propertiesChanged`.\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertiesChanged\n * @summary Mixin that provides a minimal starting point for using\n * the PropertiesChanged mixin by providing a declarative `properties` object.\n */\nexport const PropertiesMixin = dedupingMixin(superClass => {\n\n /**\n  * @constructor\n  * @implements {Polymer_PropertiesChanged}\n  * @private\n  */\n const base = PropertiesChanged(superClass);\n\n /**\n  * Returns the super class constructor for the given class, if it is an\n  * instance of the PropertiesMixin.\n  *\n  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {?PropertiesMixinConstructor} Super class constructor\n  */\n function superPropertiesClass(constructor) {\n   const superCtor = Object.getPrototypeOf(constructor);\n\n   // Note, the `PropertiesMixin` class below only refers to the class\n   // generated by this call to the mixin; the instanceof test only works\n   // because the mixin is deduped and guaranteed only to apply once, hence\n   // all constructors in a proto chain will see the same `PropertiesMixin`\n   return (superCtor.prototype instanceof PropertiesMixin) ?\n     /** @type {!PropertiesMixinConstructor} */ (superCtor) : null;\n }\n\n /**\n  * Returns a memoized version of the `properties` object for the\n  * given class. Properties not in object format are converted to at\n  * least {type}.\n  *\n  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor\n  * @return {Object} Memoized properties object\n  */\n function ownProperties(constructor) {\n   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {\n     let props = null;\n\n     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor))) {\n       const properties = constructor.properties;\n\n       if (properties) {\n        props = normalizeProperties(properties);\n       }\n     }\n\n     constructor.__ownProperties = props;\n   }\n   return constructor.__ownProperties;\n }\n\n /**\n  * @polymer\n  * @mixinClass\n  * @extends {base}\n  * @implements {Polymer_PropertiesMixin}\n  * @unrestricted\n  */\n class PropertiesMixin extends base {\n\n   /**\n    * Implements standard custom elements getter to observes the attributes\n    * listed in `properties`.\n    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n    */\n   static get observedAttributes() {\n     if (!this.hasOwnProperty('__observedAttributes')) {\n       register(this.prototype);\n       const props = this._properties;\n       this.__observedAttributes = props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];\n     }\n     return this.__observedAttributes;\n   }\n\n   /**\n    * Finalizes an element definition, including ensuring any super classes\n    * are also finalized. This includes ensuring property\n    * accessors exist on the element prototype. This method calls\n    * `_finalizeClass` to finalize each constructor in the prototype chain.\n    * @return {void}\n    */\n   static finalize() {\n     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       if (superCtor) {\n         superCtor.finalize();\n       }\n       this.__finalized = true;\n       this._finalizeClass();\n     }\n   }\n\n   /**\n    * Finalize an element class. This includes ensuring property\n    * accessors exist on the element prototype. This method is called by\n    * `finalize` and finalizes the class constructor.\n    *\n    * @protected\n    */\n   static _finalizeClass() {\n     const props = ownProperties(/** @type {!PropertiesMixinConstructor} */(this));\n     if (props) {\n       this.createProperties(props);\n     }\n   }\n\n   /**\n    * Returns a memoized version of all properties, including those inherited\n    * from super classes. Properties not in object format are converted to\n    * at least {type}.\n    *\n    * @return {Object} Object containing properties for this class\n    * @protected\n    */\n   static get _properties() {\n     if (!this.hasOwnProperty(\n       JSCompiler_renameProperty('__properties', this))) {\n       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));\n       this.__properties = Object.assign({},\n         superCtor && superCtor._properties,\n         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));\n     }\n     return this.__properties;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method to return type specified in the\n    * static `properties` object for the given property.\n    * @param {string} name Name of property\n    * @return {*} Type to which to deserialize attribute\n    *\n    * @protected\n    */\n   static typeForProperty(name) {\n     const info = this._properties[name];\n     return info && info.type;\n   }\n\n   /**\n    * Overrides `PropertiesChanged` method and adds a call to\n    * `finalize` which lazily configures the element's property accessors.\n    * @override\n    * @return {void}\n    */\n   _initializeProperties() {\n     incrementInstanceCount();\n     this.constructor.finalize();\n     super._initializeProperties();\n   }\n\n   /**\n    * Called when the element is added to a document.\n    * Calls `_enableProperties` to turn on property system from\n    * `PropertiesChanged`.\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   connectedCallback() {\n     if (super.connectedCallback) {\n       super.connectedCallback();\n     }\n     this._enableProperties();\n   }\n\n   /**\n    * Called when the element is removed from a document\n    * @suppress {missingProperties} Super may or may not implement the callback\n    * @return {void}\n    * @override\n    */\n   disconnectedCallback() {\n     if (super.disconnectedCallback) {\n       super.disconnectedCallback();\n     }\n   }\n\n }\n\n return PropertiesMixin;\n\n});\n","/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\nimport '../utils/boot.js';\n\nimport { rootPath, strictTemplatePolicy, allowTemplateFromDomModule, legacyOptimizations, syncInitialRender } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { stylesFromTemplate, stylesFromModuleImports } from '../utils/style-gather.js';\nimport { pathFromUrl, resolveCss, resolveUrl } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\nimport { PropertiesMixin } from './properties-mixin.js';\nimport { wrap } from '../utils/wrap.js';\n\n/**\n * Current Polymer version in Semver notation.\n * @type {string} Semver notation of the current version of Polymer.\n */\nexport const version = '3.2.0';\n\nconst builtCSS = window.ShadyCSS && window.ShadyCSS['cssBuild'];\n\n/**\n * Element class mixin that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * Subclassers may provide the following static getters to return metadata\n * used to configure Polymer's features for the class:\n *\n * - `static get is()`: When the template is provided via a `dom-module`,\n *   users should return the `dom-module` id from a static `is` getter.  If\n *   no template is needed or the template is provided directly via the\n *   `template` getter, there is no need to define `is` for the element.\n *\n * - `static get template()`: Users may provide the template directly (as\n *   opposed to via `dom-module`) by implementing a static `template` getter.\n *   The getter must return an `HTMLTemplateElement`.\n *\n * - `static get properties()`: Should return an object describing\n *   property-related metadata used by Polymer features (key: property name\n *   value: object containing property metadata). Valid keys in per-property\n *   metadata include:\n *   - `type` (String|Number|Object|Array|...): Used by\n *     `attributeChangedCallback` to determine how string-based attributes\n *     are deserialized to JavaScript property values.\n *   - `notify` (boolean): Causes a change in the property to fire a\n *     non-bubbling event called `<property>-changed`. Elements that have\n *     enabled two-way binding to the property use this event to observe changes.\n *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n *     To set a read-only property, use the private setter method\n *     `_setProperty(property, value)`.\n *   - `observer` (string): Observer method name that will be called when\n *     the property changes. The arguments of the method are\n *     `(value, previousValue)`.\n *   - `computed` (string): String describing method and dependent properties\n *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n *     Computed properties are read-only by default and can only be changed\n *     via the return value of the computing method.\n *\n * - `static get observers()`: Array of strings describing multi-property\n *   observer methods and their dependent properties (e.g.\n *   `'observeABC(a, b, c)'`).\n *\n * The base class provides default implementations for the following standard\n * custom element lifecycle callbacks; users may override these, but should\n * call the super method to ensure\n * - `constructor`: Run when the element is created or upgraded\n * - `connectedCallback`: Run each time the element is connected to the\n *   document\n * - `disconnectedCallback`: Run each time the element is disconnected from\n *   the document\n * - `attributeChangedCallback`: Run each time an attribute in\n *   `observedAttributes` is set or removed (note: this element's default\n *   `observedAttributes` implementation will automatically return an array\n *   of dash-cased attributes based on `properties`)\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin PropertyEffects\n * @appliesMixin PropertiesMixin\n * @property rootPath {string} Set to the value of `rootPath`,\n *   which defaults to the main document path\n * @property importPath {string} Set to the value of the class's static\n *   `importPath` property, which defaults to the path of this element's\n *   `dom-module` (when `is` is used), but can be overridden for other\n *   import strategies.\n * @summary Element class mixin that provides the core API for Polymer's\n * meta-programming features.\n */\nexport const ElementMixin = dedupingMixin(base => {\n  /**\n   * @constructor\n   * @implements {Polymer_PropertyEffects}\n   * @implements {Polymer_PropertiesMixin}\n   * @extends {HTMLElement}\n   * @private\n   */\n  const polymerElementBase = PropertiesMixin(PropertyEffects(base));\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `_properties`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaults(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__propertyDefaults', constructor))) {\n      constructor.__propertyDefaults = null;\n      let props = constructor._properties;\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          constructor.__propertyDefaults = constructor.__propertyDefaults || {};\n          constructor.__propertyDefaults[p] = info;\n        }\n      }\n    }\n    return constructor.__propertyDefaults;\n  }\n\n  /**\n   * Returns a memoized version of the `observers` array.\n   * @param {PolymerElementConstructor} constructor Element class\n   * @return {Array} Array containing own observers for the given class\n   * @protected\n   */\n  function ownObservers(constructor) {\n    if (!constructor.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', constructor))) {\n      constructor.__ownObservers =\n          constructor.hasOwnProperty(\n              JSCompiler_renameProperty('observers', constructor)) ?\n          /** @type {PolymerElementConstructor} */ (constructor).observers :\n          null;\n    }\n    return constructor.__ownObservers;\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is deserialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * is also automatically set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttribute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   *\n   * @param {!PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @return {void}\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed) {\n      if (proto._hasReadOnlyEffect(name)) {\n        console.warn(`Cannot redefine computed property '${name}'.`);\n      } else {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    } else if (info.readOnly === false && proto._hasReadOnlyEffect(name)) {\n      console.warn(`Cannot make readOnly property '${name}' non-readOnly.`);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    } else if (info.reflectToAttribute === false && proto._hasReflectEffect(name)) {\n      console.warn(`Cannot make reflected property '${name}' non-reflected.`);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    } else if (info.notify === false && proto._hasNotifyEffect(name)) {\n      console.warn(`Cannot make notify property '${name}' non-notify.`);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n    // always create the mapping from attribute back to property for deserialization.\n    proto._addPropertyToAttributeMap(name);\n  }\n\n  /**\n   * Process all style elements in the element template. Styles with the\n   * `include` attribute are processed such that any styles in\n   * the associated \"style modules\" are included in the element template.\n   * @param {PolymerElementConstructor} klass Element class\n   * @param {!HTMLTemplateElement} template Template to process\n   * @param {string} is Name of element\n   * @param {string} baseURI Base URI for element\n   * @private\n   */\n  function processElementStyles(klass, template, is, baseURI) {\n    if (!builtCSS) {\n      const templateStyles = template.content.querySelectorAll('style');\n      const stylesWithImports = stylesFromTemplate(template);\n      // insert styles from <link rel=\"import\" type=\"css\"> at the top of the template\n      const linkedStyles = stylesFromModuleImports(is);\n      const firstTemplateChild = template.content.firstElementChild;\n      for (let idx = 0; idx < linkedStyles.length; idx++) {\n        let s = linkedStyles[idx];\n        s.textContent = klass._processStyleText(s.textContent, baseURI);\n        template.content.insertBefore(s, firstTemplateChild);\n      }\n      // keep track of the last \"concrete\" style in the template we have encountered\n      let templateStyleIndex = 0;\n      // ensure all gathered styles are actually in this template.\n      for (let i = 0; i < stylesWithImports.length; i++) {\n        let s = stylesWithImports[i];\n        let templateStyle = templateStyles[templateStyleIndex];\n        // if the style is not in this template, it's been \"included\" and\n        // we put a clone of it in the template before the style that included it\n        if (templateStyle !== s) {\n          s = s.cloneNode(true);\n          templateStyle.parentNode.insertBefore(s, templateStyle);\n        } else {\n          templateStyleIndex++;\n        }\n        s.textContent = klass._processStyleText(s.textContent, baseURI);\n      }\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is);\n    }\n  }\n\n  /**\n   * Look up template from dom-module for element\n   *\n   * @param {string} is Element name to look up\n   * @return {?HTMLTemplateElement|undefined} Template found in dom module, or\n   *   undefined if not found\n   * @protected\n   */\n  function getTemplateFromDomModule(is) {\n    let template = null;\n    // Under strictTemplatePolicy in 3.x+, dom-module lookup is only allowed\n    // when opted-in via allowTemplateFromDomModule\n    if (is && (!strictTemplatePolicy || allowTemplateFromDomModule)) {\n      template = /** @type {?HTMLTemplateElement} */ (\n          DomModule.import(is, 'template'));\n      // Under strictTemplatePolicy, require any element with an `is`\n      // specified to have a dom-module\n      if (strictTemplatePolicy && !template) {\n        throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${is}`);\n      }\n    }\n    return template;\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   * @extends {polymerElementBase}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Current Polymer version in Semver notation.\n     * @type {string} Semver notation of the current version of Polymer.\n     */\n    static get polymerElementVersion() {\n      return version;\n    }\n\n    /**\n     * Override of PropertiesMixin _finalizeClass to create observers and\n     * find the template.\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _finalizeClass() {\n      super._finalizeClass();\n      const observers = ownObservers(this);\n      if (observers) {\n        this.createObservers(observers, this._properties);\n      }\n      this._prepareTemplate();\n    }\n\n    static _prepareTemplate() {\n      // note: create \"working\" template that is finalized at instance time\n      let template = /** @type {PolymerElementConstructor} */ (this).template;\n      if (template) {\n        if (typeof template === 'string') {\n          console.error('template getter must return HTMLTemplateElement');\n          template = null;\n        } else if (!legacyOptimizations) {\n          template = template.cloneNode(true);\n        }\n      }\n\n      this.prototype._template = template;\n    }\n\n    /**\n     * Override of PropertiesChanged createProperties to create accessors\n     * and property effects for all of the properties.\n     * @param {!Object} props .\n     * @return {void}\n     * @protected\n     */\n    static createProperties(props) {\n      for (let p in props) {\n        createPropertyFromConfig(this.prototype, p, props[p], props);\n      }\n    }\n\n    /**\n     * Creates observers for the given `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {Object} observers Array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @return {void}\n     * @protected\n     */\n    static createObservers(observers, dynamicFns) {\n      const proto = this.prototype;\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation\n     * will return the first `<template>` in a `dom-module` whose `id`\n     * matches this element's `is`.\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * must be an `HTMLTemplateElement`.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {!HTMLTemplateElement|string} Template to be stamped\n     */\n    static get template() {\n      // Explanation of template-related properties:\n      // - constructor.template (this getter): the template for the class.\n      //     This can come from the prototype (for legacy elements), from a\n      //     dom-module, or from the super class's template (or can be overridden\n      //     altogether by the user)\n      // - constructor._template: memoized version of constructor.template\n      // - prototype._template: working template for the element, which will be\n      //     parsed and modified in place. It is a cloned version of\n      //     constructor.template, saved in _finalizeClass(). Note that before\n      //     this getter is called, for legacy elements this could be from a\n      //     _template field on the info object passed to Polymer(), a behavior,\n      //     or set in registered(); once the static getter runs, a clone of it\n      //     will overwrite it on the prototype as the working template.\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        this._template =\n          // If user has put template on prototype (e.g. in legacy via registered\n          // callback or info object), prefer that first\n          this.prototype.hasOwnProperty(JSCompiler_renameProperty('_template', this.prototype)) ?\n          this.prototype._template :\n          // Look in dom-module associated with this element's is\n          (getTemplateFromDomModule(/** @type {PolymerElementConstructor}*/ (this).is) ||\n          // Next look for superclass template (call the super impl this\n          // way so that `this` points to the superclass)\n          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template);\n      }\n      return this._template;\n    }\n\n    /**\n     * Set the template.\n     *\n     * @param {!HTMLTemplateElement|string} value Template to set.\n     */\n    static set template(value) {\n      this._template = value;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     *\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     *\n     * For elements defined in ES modules, users should implement\n     * `static get importMeta() { return import.meta; }`, and the default\n     * implementation of `importPath` will  return `import.meta.url`'s path.\n     * For elements defined in HTML imports, this getter will return the path\n     * to the document containing a `dom-module` element matching this\n     * element's static `is` property.\n     *\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     * @suppress {missingProperties}\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n        const meta = this.importMeta;\n        if (meta) {\n          this._importPath = pathFromUrl(meta.url);\n        } else {\n          const module = DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);\n          this._importPath = (module && module.assetpath) ||\n            Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;\n        }\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Element>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @return {void}\n     * @override\n     * @suppress {invalidCasts,missingProperties} go/missingfnprops\n     */\n    _initializeProperties() {\n      this.constructor.finalize();\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath;\n      this.importPath = this.constructor.importPath;\n      // apply property defaults...\n      let p$ = propertyDefaults(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        // Don't set default value if there is already an own property, which\n        // happens when a `properties` property with default but no effects had\n        // a property set (e.g. bound) by its host before upgrade\n        if (!this.hasOwnProperty(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Gather style text for a style element in the template.\n     *\n     * @param {string} cssText Text containing styling to process\n     * @param {string} baseURI Base URI to rebase CSS paths against\n     * @return {string} The processed CSS text\n     * @protected\n     */\n    static _processStyleText(cssText, baseURI) {\n      return resolveCss(cssText, baseURI);\n    }\n\n    /**\n    * Configures an element `proto` to function with a given `template`.\n    * The element name `is` and extends `ext` must be specified for ShadyCSS\n    * style scoping.\n    *\n    * @param {string} is Tag name (or type extension name) for this element\n    * @return {void}\n    * @protected\n    */\n    static _finalizeTemplate(is) {\n      /** @const {HTMLTemplateElement} */\n      const template = this.prototype._template;\n      if (template && !template.__polymerFinalized) {\n        template.__polymerFinalized = true;\n        const importPath = this.importPath;\n        const baseURI = importPath ? resolveUrl(importPath) : '';\n        // e.g. support `include=\"module-name\"`, and ShadyCSS\n        processElementStyles(this, template, is, baseURI);\n        this.prototype._bindTemplate(template);\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @override\n     * @suppress {missingProperties, invalidCasts} Super may or may not\n     *     implement the callback\n     * @return {void}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      super.connectedCallback();\n    }\n\n    /**\n     * Stamps the element template.\n     *\n     * @return {void}\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @return {void}\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @override\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      const n = wrap(this);\n      if (n.attachShadow) {\n        if (dom) {\n          if (!n.shadowRoot) {\n            n.attachShadow({mode: 'open'});\n          }\n          n.shadowRoot.appendChild(dom);\n          if (syncInitialRender && window.ShadyDOM) {\n            ShadyDOM.flushInitial(n.shadowRoot);\n          }\n          return n.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'PolymerElement can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * Note: This function does not support updating CSS mixins.\n     * You can not dynamically change the value of an `@apply`.\n     *\n     * @override\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @return {void}\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * Note that this function performs no resolution for URLs that start\n     * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\n     * URL resolution, use `window.URL`.\n     *\n     * @override\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl(this.importPath);\n      }\n      return resolveUrl(url, base);\n    }\n\n    /**\n     * Overrides `PropertyEffects` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @param {!HTMLTemplateElement} template Template\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} .\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;\n      return super._parseTemplateContent(template, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Overrides `PropertyEffects` to warn on use of undeclared properties in\n     * template.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @return {void}\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      // Warn if properties are used in template without being declared.\n      // Properties must be listed in `properties` to be included in\n      // `observedAttributes` since CE V1 reads that at registration time, and\n      // since we want to keep template parsing lazy, we can't automatically\n      // add undeclared properties used in templates to `observedAttributes`.\n      // The warning is only enabled in `legacyOptimizations` mode, since\n      // we don't want to spam existing users who might have adopted the\n      // shorthand when attribute deserialization is not important.\n      if (legacyOptimizations && !(prop in this._properties)) {\n        console.warn(`Property '${prop}' used in template but not declared in 'properties'; ` +\n          `attribute will not be observed.`);\n      }\n      return super._addTemplatePropertyEffect(templateInfo, prop, effect);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\n/**\n * When using the ShadyCSS scoping and custom property shim, causes all\n * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n * to be updated based on current custom property values.\n *\n * The optional parameter overrides inline custom property styles with an\n * object of properties where the keys are CSS properties, and the values\n * are strings.\n *\n * Example: `updateStyles({'--color': 'blue'})`\n *\n * These properties are retained unless a value of `null` is set.\n *\n * @param {Object=} props Bag of custom property key/values to\n *   apply to the document.\n * @return {void}\n */\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nclass LiteralString {\n  constructor(string) {\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   * @override\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */(value).value;\n  } else {\n    throw new Error(\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\n    );\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\n        `non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport const html = function html(strings, ...values) {\n  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));\n  template.innerHTML = values.reduce((acc, v, idx) =>\n      acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  return template;\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport const htmlLiteral = function(strings, ...values) {\n  return new LiteralString(values.reduce((acc, v, idx) =>\n      acc + literalValue(v) + strings[idx + 1], strings[0]));\n};\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\nimport { ElementMixin, version } from './lib/mixins/element-mixin.js';\nexport { html } from './lib/utils/html-tag.js';\n\nexport { version };\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nexport const PolymerElement = ElementMixin(HTMLElement);\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nfunction newSplice(index, removed, addedCount) {\n  return {\n    index: index,\n    removed: removed,\n    addedCount: addedCount\n  };\n}\n\nconst EDIT_LEAVE = 0;\nconst EDIT_UPDATE = 1;\nconst EDIT_ADD = 2;\nconst EDIT_DELETE = 3;\n\n// Note: This function is *based* on the computation of the Levenshtein\n// \"edit\" distance. The one change is that \"updates\" are treated as two\n// edits - not one. With Array splices, an update is really a delete\n// followed by an add. By retaining this, we optimize for \"keeping\" the\n// maximum array items in the original array. For example:\n//\n//   'xxxx123' -> '123yyyy'\n//\n// With 1-edit updates, the shortest path would be just to update all seven\n// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n// leaves the substring '123' intact.\nfunction calcEditDistances(current, currentStart, currentEnd,\n                            old, oldStart, oldEnd) {\n  // \"Deletion\" columns\n  let rowCount = oldEnd - oldStart + 1;\n  let columnCount = currentEnd - currentStart + 1;\n  let distances = new Array(rowCount);\n\n  // \"Addition\" rows. Initialize null column.\n  for (let i = 0; i < rowCount; i++) {\n    distances[i] = new Array(columnCount);\n    distances[i][0] = i;\n  }\n\n  // Initialize null row\n  for (let j = 0; j < columnCount; j++)\n    distances[0][j] = j;\n\n  for (let i = 1; i < rowCount; i++) {\n    for (let j = 1; j < columnCount; j++) {\n      if (equals(current[currentStart + j - 1], old[oldStart + i - 1]))\n        distances[i][j] = distances[i - 1][j - 1];\n      else {\n        let north = distances[i - 1][j] + 1;\n        let west = distances[i][j - 1] + 1;\n        distances[i][j] = north < west ? north : west;\n      }\n    }\n  }\n\n  return distances;\n}\n\n// This starts at the final weight, and walks \"backward\" by finding\n// the minimum previous weight recursively until the origin of the weight\n// matrix.\nfunction spliceOperationsFromEditDistances(distances) {\n  let i = distances.length - 1;\n  let j = distances[0].length - 1;\n  let current = distances[i][j];\n  let edits = [];\n  while (i > 0 || j > 0) {\n    if (i == 0) {\n      edits.push(EDIT_ADD);\n      j--;\n      continue;\n    }\n    if (j == 0) {\n      edits.push(EDIT_DELETE);\n      i--;\n      continue;\n    }\n    let northWest = distances[i - 1][j - 1];\n    let west = distances[i - 1][j];\n    let north = distances[i][j - 1];\n\n    let min;\n    if (west < north)\n      min = west < northWest ? west : northWest;\n    else\n      min = north < northWest ? north : northWest;\n\n    if (min == northWest) {\n      if (northWest == current) {\n        edits.push(EDIT_LEAVE);\n      } else {\n        edits.push(EDIT_UPDATE);\n        current = northWest;\n      }\n      i--;\n      j--;\n    } else if (min == west) {\n      edits.push(EDIT_DELETE);\n      i--;\n      current = west;\n    } else {\n      edits.push(EDIT_ADD);\n      j--;\n      current = north;\n    }\n  }\n\n  edits.reverse();\n  return edits;\n}\n\n/**\n * Splice Projection functions:\n *\n * A splice map is a representation of how a previous array of items\n * was transformed into a new array of items. Conceptually it is a list of\n * tuples of\n *\n *   <index, removed, addedCount>\n *\n * which are kept in ascending index order of. The tuple represents that at\n * the |index|, |removed| sequence of items were removed, and counting forward\n * from |index|, |addedCount| items were added.\n */\n\n/**\n * Lacking individual splice mutation information, the minimal set of\n * splices can be synthesized given the previous state and final state of an\n * array. The basic approach is to calculate the edit distance matrix and\n * choose the shortest path through it.\n *\n * Complexity: O(l * p)\n *   l: The length of the current array\n *   p: The length of the old array\n *\n * @param {!Array} current The current \"changed\" array for which to\n * calculate splices.\n * @param {number} currentStart Starting index in the `current` array for\n * which splices are calculated.\n * @param {number} currentEnd Ending index in the `current` array for\n * which splices are calculated.\n * @param {!Array} old The original \"unchanged\" array to compare `current`\n * against to determine splices.\n * @param {number} oldStart Starting index in the `old` array for\n * which splices are calculated.\n * @param {number} oldEnd Ending index in the `old` array for\n * which splices are calculated.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nfunction calcSplices(current, currentStart, currentEnd,\n                      old, oldStart, oldEnd) {\n  let prefixCount = 0;\n  let suffixCount = 0;\n  let splice;\n\n  let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n  if (currentStart == 0 && oldStart == 0)\n    prefixCount = sharedPrefix(current, old, minLength);\n\n  if (currentEnd == current.length && oldEnd == old.length)\n    suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n\n  currentStart += prefixCount;\n  oldStart += prefixCount;\n  currentEnd -= suffixCount;\n  oldEnd -= suffixCount;\n\n  if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\n    return [];\n\n  if (currentStart == currentEnd) {\n    splice = newSplice(currentStart, [], 0);\n    while (oldStart < oldEnd)\n      splice.removed.push(old[oldStart++]);\n\n    return [ splice ];\n  } else if (oldStart == oldEnd)\n    return [ newSplice(currentStart, [], currentEnd - currentStart) ];\n\n  let ops = spliceOperationsFromEditDistances(\n      calcEditDistances(current, currentStart, currentEnd,\n                             old, oldStart, oldEnd));\n\n  splice = undefined;\n  let splices = [];\n  let index = currentStart;\n  let oldIndex = oldStart;\n  for (let i = 0; i < ops.length; i++) {\n    switch(ops[i]) {\n      case EDIT_LEAVE:\n        if (splice) {\n          splices.push(splice);\n          splice = undefined;\n        }\n\n        index++;\n        oldIndex++;\n        break;\n      case EDIT_UPDATE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n      case EDIT_ADD:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.addedCount++;\n        index++;\n        break;\n      case EDIT_DELETE:\n        if (!splice)\n          splice = newSplice(index, [], 0);\n\n        splice.removed.push(old[oldIndex]);\n        oldIndex++;\n        break;\n    }\n  }\n\n  if (splice) {\n    splices.push(splice);\n  }\n  return splices;\n}\n\nfunction sharedPrefix(current, old, searchLength) {\n  for (let i = 0; i < searchLength; i++)\n    if (!equals(current[i], old[i]))\n      return i;\n  return searchLength;\n}\n\nfunction sharedSuffix(current, old, searchLength) {\n  let index1 = current.length;\n  let index2 = old.length;\n  let count = 0;\n  while (count < searchLength && equals(current[--index1], old[--index2]))\n    count++;\n\n  return count;\n}\n\n/**\n * Returns an array of splice records indicating the minimum edits required\n * to transform the `previous` array into the `current` array.\n *\n * Splice records are ordered by index and contain the following fields:\n * - `index`: index where edit started\n * - `removed`: array of removed items from this index\n * - `addedCount`: number of items added at this index\n *\n * This function is based on the Levenshtein \"minimum edit distance\"\n * algorithm. Note that updates are treated as removal followed by addition.\n *\n * The worst-case time complexity of this algorithm is `O(l * p)`\n *   l: The length of the current array\n *   p: The length of the previous array\n *\n * However, the worst-case complexity is reduced by an `O(n)` optimization\n * to detect any shared prefix & suffix between the two arrays and only\n * perform the more expensive minimum edit distance calculation over the\n * non-shared portions of the arrays.\n *\n * @function\n * @param {!Array} current The \"changed\" array for which splices will be\n * calculated.\n * @param {!Array} previous The \"unchanged\" original array to compare\n * `current` against to determine the splices.\n * @return {!Array} Returns an array of splice record objects. Each of these\n * contains: `index` the location where the splice occurred; `removed`\n * the array of removed items from this location; `addedCount` the number\n * of items added at this location.\n */\nexport function calculateSplices(current, previous) {\n  return calcSplices(current, 0, current.length, previous, 0,\n                          previous.length);\n}\n\nfunction equals(currentValue, previousValue) {\n  return currentValue === previousValue;\n}\n","/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { calculateSplices } from './array-splice.js';\nimport { microTask } from './async.js';\nimport { wrap } from './wrap.js';\n\n/**\n * Returns true if `node` is a slot element\n * @param {!Node} node Node to test.\n * @return {boolean} Returns true if the given `node` is a slot\n * @private\n */\nfunction isSlot(node) {\n  return (node.localName === 'slot');\n}\n\n/**\n * Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n * of a node's children and, for any children that are `<slot>` elements,\n * the expanded flattened list of `assignedNodes`.\n * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n * and the `<slot>` has one `<div>` assigned to it, then the flattened\n * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n * `<slot>` elements assigned to it, these are flattened as well.\n *\n * The provided `callback` is called whenever any change to this list\n * of flattened nodes occurs, where an addition or removal of a node is\n * considered a change. The `callback` is called with one argument, an object\n * containing an array of any `addedNodes` and `removedNodes`.\n *\n * Note: the callback is called asynchronous to any changes\n * at a microtask checkpoint. This is because observation is performed using\n * `MutationObserver` and the `<slot>` element's `slotchange` event which\n * are asynchronous.\n *\n * An example:\n * ```js\n * class TestSelfObserve extends PolymerElement {\n *   static get is() { return 'test-self-observe';}\n *   connectedCallback() {\n *     super.connectedCallback();\n *     this._observer = new FlattenedNodesObserver(this, (info) => {\n *       this.info = info;\n *     });\n *   }\n *   disconnectedCallback() {\n *     super.disconnectedCallback();\n *     this._observer.disconnect();\n *   }\n * }\n * customElements.define(TestSelfObserve.is, TestSelfObserve);\n * ```\n *\n * @summary Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`.\n * @implements {PolymerDomApi.ObserveHandle}\n */\nexport let FlattenedNodesObserver = class {\n\n  /**\n   * Returns the list of flattened nodes for the given `node`.\n   * This list consists of a node's children and, for any children\n   * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n   * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n   * and the `<slot>` has one `<div>` assigned to it, then the flattened\n   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n   * `<slot>` elements assigned to it, these are flattened as well.\n   *\n   * @param {!HTMLElement|!HTMLSlotElement} node The node for which to\n   *      return the list of flattened nodes.\n   * @return {!Array<!Node>} The list of flattened nodes for the given `node`.\n   * @nocollapse See https://github.com/google/closure-compiler/issues/2763\n   */\n  // eslint-disable-next-line\n  static getFlattenedNodes(node) {\n    const wrapped = wrap(node);\n    if (isSlot(node)) {\n      node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n      return wrapped.assignedNodes({flatten: true});\n    } else {\n      return Array.from(wrapped.childNodes).map((node) => {\n        if (isSlot(node)) {\n          node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n          return wrap(node).assignedNodes({flatten: true});\n        } else {\n          return [node];\n        }\n      }).reduce((a, b) => a.concat(b), []);\n    }\n  }\n\n  /**\n   * @param {!HTMLElement} target Node on which to listen for changes.\n   * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions\n   * or removals from the target's list of flattened nodes.\n   */\n  // eslint-disable-next-line\n  constructor(target, callback) {\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._shadyChildrenObserver = null;\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._nativeChildrenObserver = null;\n    this._connected = false;\n    /**\n     * @type {!HTMLElement}\n     * @private\n     */\n    this._target = target;\n    this.callback = callback;\n    this._effectiveNodes = [];\n    this._observer = null;\n    this._scheduled = false;\n    /**\n     * @type {function()}\n     * @private\n     */\n    this._boundSchedule = () => {\n      this._schedule();\n    };\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `FlattenedNodesObserver` is created. It should only be called to\n   * re-activate an observer that has been deactivated via the `disconnect` method.\n   *\n   * @return {void}\n   */\n  connect() {\n    if (isSlot(this._target)) {\n      this._listenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._listenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM) {\n        this._shadyChildrenObserver =\n          ShadyDOM.observeChildren(this._target, (mutations) => {\n            this._processMutations(mutations);\n          });\n      } else {\n        this._nativeChildrenObserver =\n          new MutationObserver((mutations) => {\n            this._processMutations(mutations);\n          });\n        this._nativeChildrenObserver.observe(this._target, {childList: true});\n      }\n    }\n    this._connected = true;\n  }\n\n  /**\n   * Deactivates the flattened nodes observer. After calling this method\n   * the observer callback will not be called when changes to flattened nodes\n   * occur. The `connect` method may be subsequently called to reactivate\n   * the observer.\n   *\n   * @return {void}\n   * @override\n   */\n  disconnect() {\n    if (isSlot(this._target)) {\n      this._unlistenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._unlistenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM && this._shadyChildrenObserver) {\n        ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n        this._shadyChildrenObserver = null;\n      } else if (this._nativeChildrenObserver) {\n        this._nativeChildrenObserver.disconnect();\n        this._nativeChildrenObserver = null;\n      }\n    }\n    this._connected = false;\n  }\n\n  /**\n   * @return {void}\n   * @private\n   */\n  _schedule() {\n    if (!this._scheduled) {\n      this._scheduled = true;\n      microTask.run(() => this.flush());\n    }\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processMutations(mutations) {\n    this._processSlotMutations(mutations);\n    this.flush();\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processSlotMutations(mutations) {\n    if (mutations) {\n      for (let i=0; i < mutations.length; i++) {\n        let mutation = mutations[i];\n        if (mutation.addedNodes) {\n          this._listenSlots(mutation.addedNodes);\n        }\n        if (mutation.removedNodes) {\n          this._unlistenSlots(mutation.removedNodes);\n        }\n      }\n    }\n  }\n\n  /**\n   * Flushes the observer causing any pending changes to be immediately\n   * delivered the observer callback. By default these changes are delivered\n   * asynchronously at the next microtask checkpoint.\n   *\n   * @return {boolean} Returns true if any pending changes caused the observer\n   * callback to run.\n   */\n  flush() {\n    if (!this._connected) {\n      return false;\n    }\n    if (window.ShadyDOM) {\n      ShadyDOM.flush();\n    }\n    if (this._nativeChildrenObserver) {\n      this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n    } else if (this._shadyChildrenObserver) {\n      this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n    }\n    this._scheduled = false;\n    let info = {\n      target: this._target,\n      addedNodes: [],\n      removedNodes: []\n    };\n    let newNodes = this.constructor.getFlattenedNodes(this._target);\n    let splices = calculateSplices(newNodes,\n      this._effectiveNodes);\n    // process removals\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n        info.removedNodes.push(n);\n      }\n    }\n    // process adds\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=s.index; j < s.index + s.addedCount; j++) {\n        info.addedNodes.push(newNodes[j]);\n      }\n    }\n    // update cache\n    this._effectiveNodes = newNodes;\n    let didFlush = false;\n    if (info.addedNodes.length || info.removedNodes.length) {\n      didFlush = true;\n      this.callback.call(this._target, info);\n    }\n    return didFlush;\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _listenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.addEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _unlistenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.removeEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n};","import {html} from '@polymer/polymer/polymer-element.js';\n\nexport const oneDark = html`\n<style>\n  /*\n\n  Atom One Dark by Daniel Gamage\n  Original One Dark Syntax theme from https://github.com/atom/one-dark-syntax\n\n  base:    #282c34\n  mono-1:  #abb2bf\n  mono-2:  #818896\n  mono-3:  #5c6370\n  hue-1:   #56b6c2\n  hue-2:   #61aeee\n  hue-3:   #c678dd\n  hue-4:   #98c379\n  hue-5:   #e06c75\n  hue-5-2: #be5046\n  hue-6:   #d19a66\n  hue-6-2: #e6c07b\n\n  */\n\n  .hljs {\n    display: block;\n    overflow-x: auto;\n    color: var(--code-sample-color, #abb2bf);\n    background: var(--code-sample-background, #282c34);\n  }\n\n  .hljs-comment,\n  .hljs-quote {\n    color: #5c6370;\n    font-style: italic;\n  }\n\n  .hljs-doctag,\n  .hljs-keyword,\n  .hljs-formula {\n    color: #c678dd;\n  }\n\n  .hljs-section,\n  .hljs-name,\n  .hljs-selector-tag,\n  .hljs-deletion,\n  .hljs-subst,\n  .hljs-tag {\n    color: #e06c75;\n  }\n\n  .hljs-literal {\n    color: #56b6c2;\n  }\n\n  .hljs-string,\n  .hljs-regexp,\n  .hljs-addition,\n  .hljs-attribute,\n  .hljs-meta-string {\n    color: #98c379;\n  }\n\n  .hljs-built_in,\n  .hljs-class .hljs-title {\n    color: #e6c07b;\n  }\n\n  .hljs-attr,\n  .hljs-variable,\n  .hljs-template-variable,\n  .hljs-type,\n  .hljs-selector-class,\n  .hljs-selector-attr,\n  .hljs-selector-pseudo,\n  .hljs-number {\n    color: #d19a66;\n  }\n\n  .hljs-symbol,\n  .hljs-bullet,\n  .hljs-link,\n  .hljs-meta,\n  .hljs-selector-id,\n  .hljs-title {\n    color: #61aeee;\n  }\n\n  .hljs-emphasis {\n    font-style: italic;\n  }\n\n  .hljs-strong {\n    font-weight: bold;\n  }\n\n  .hljs-link {\n    text-decoration: underline;\n  }\n\n  .hljs-params {\n    color: #e6c07b;\n  }\n</style>`;\n","import {PolymerElement, html} from '@polymer/polymer/polymer-element.js';\nimport {FlattenedNodesObserver} from '@polymer/polymer/lib/utils/flattened-nodes-observer.js';\nimport {oneDark} from './themes/one-dark.js';\nimport './vendor/highlight/highlight.pack.js';\n\n/**\n * `<code-sample>` uses [highlight.js](https://highlightjs.org/) for syntax highlighting.\n * @polymer\n * @customElement\n * @extends {PolymerElement}\n * @demo https://kcmr.github.io/code-sample/\n */\nclass CodeSample extends PolymerElement {\n  static get template() {\n    return html`\n    ${this.constructor.theme || oneDark}\n    <style include=\"code-sample-theme\" id=\"baseStyle\">\n    :host {\n      display: block;\n    }\n\n    :host([hidden]),\n    [hidden] {\n      display: none;\n    }\n\n    pre {\n      margin: 0;\n      @apply --code-sample-pre;\n    }\n\n    pre, code {\n      font-family: var(--code-sample-font-family, Operator Mono, Inconsolata, Roboto Mono, monaco, consolas, monospace);\n      font-size: var(--code-sample-font-size, 0.875rem);\n    }\n\n    .hljs {\n      padding: 0 1.25rem;\n      line-height: var(--code-sample-line-height, 1.3);\n      @apply --code-sample-hljs;\n    }\n\n    .demo:not(:empty) {\n      padding: var(--code-sample-demo-padding, 0 0 1.25rem);\n      @apply --code-sample-demo-not-empty;\n    }\n\n    .demo {\n      @apply --code-sample-demo;\n    }\n\n    #code-container {\n      position: relative;\n      @apply --code-sample-code-container;\n    }\n\n    #code-container:hover {\n      @apply --code-sample-code-container-hover;\n    }\n\n    #code-container:hover > button {\n      @apply --code-sample-code-container-hover-button;\n    }\n\n    button {\n      background: var(--code-sample-copy-button-bg-color, #e0e0e0);\n      border: none;\n      cursor: pointer;\n      display: block;\n      position: absolute;\n      right: 0;\n      top: 0;\n      text-transform: uppercase;\n      @apply --code-sample-copy-clipboard-button;\n    }\n    </style>\n\n    <div id=\"demo\" class=\"demo\"></div>\n    <slot id=\"content\"></slot>\n\n    <div id=\"code-container\">\n      <button\n        type=\"button\"\n        hidden=\"[[!copyClipboardButton]]\"\n        id=\"copyButton\"\n        title=\"Copy to clipboard\"\n        on-click=\"_copyToClipboard\">Copy</button>\n      <pre id=\"code\"></pre>\n    </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      // Set to true to show a copy to clipboard button.\n      copyClipboardButton: {\n        type: Boolean,\n        value: false,\n      },\n      // Tagged template literal with custom styles.\n      // Only supported in Shadow DOM.\n      theme: {\n        type: String,\n        observer: '_themeChanged',\n      },\n      // Set to true to render the code inside the template.\n      render: {\n        type: Boolean,\n        value: false,\n      },\n      // Code type (optional). (eg.: html, js, css)\n      // Options are the same as the available classes for `<code>` tag using highlight.js\n      type: {\n        type: String,\n      },\n    };\n  }\n\n  _themeChanged(theme) {\n    if (theme && this._themeCanBeChanged()) {\n      const previousTheme = this.shadowRoot.querySelector('style:not(#baseStyle)');\n      this.shadowRoot.replaceChild(\n        document.importNode(theme.content, true),\n        previousTheme\n      );\n    }\n  }\n\n  _themeCanBeChanged() {\n    if (window.ShadyCSS) {\n      console.error('<code-sample>:', 'Theme changing is not supported in Shady DOM.');\n      return;\n    }\n\n    if (this.theme.tagName !== 'TEMPLATE') {\n      console.error('<code-sample>:', 'theme must be a template');\n      return;\n    }\n\n    return true;\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    setTimeout(() => {\n      if (this.querySelector('template')) {\n        this._observer = new FlattenedNodesObserver(this.$.content, () => this._updateContent());\n      } else if (this.childNodes.length) {\n        console.error('<code-sample>:', 'content must be provided inside a <template> tag');\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    if (this._observer) {\n      this._observer.disconnect();\n      this._observer = null;\n    }\n  }\n\n  _updateContent() {\n    if (this._code) this._code.parentNode.removeChild(this._code);\n    if (this._demo) this.$.demo.innerHTML = '';\n\n    const template = this._getCodeTemplate();\n\n    if (this.render) {\n      this._demo = this.$.demo.appendChild(\n        document.importNode(template.content, true)\n      );\n    }\n\n    this._highlight(template.innerHTML);\n  }\n\n  _getCodeTemplate() {\n    const nodes = FlattenedNodesObserver.getFlattenedNodes(this.$.content);\n    return [].filter.call(nodes, (node) => node.nodeType === Node.ELEMENT_NODE)[0];\n  }\n\n  _highlight(str) {\n    this._code = document.createElement('code');\n    if (this.type) this._code.classList.add(this.type);\n    this._code.innerHTML = this._entitize(this._cleanIndentation(str));\n    this.$.code.appendChild(this._code);\n    hljs.highlightBlock(this._code);\n  }\n\n  _cleanIndentation(str) {\n    const pattern = str.match(/\\s*\\n[\\t\\s]*/);\n    return str.replace(new RegExp(pattern, 'g'), '\\n');\n  }\n\n  _entitize(str) {\n    return String(str)\n      .replace(/&lt;/g, '<')\n      .replace(/&gt;/g, '>')\n      .replace(/=\"\"/g, '')\n      .replace(/=&gt;/g, '=>')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;');\n  }\n\n  _copyToClipboard(event) {\n    const copyButton = event.target;\n\n    const textarea = this._textAreaWithClonedContent();\n    textarea.select();\n\n    try {\n      document.execCommand('copy', false);\n      copyButton.textContent = 'Done';\n    } catch (err) {\n      console.error(err);\n      copyButton.textContent = 'Error';\n    }\n\n    textarea.remove();\n\n    setTimeout(() => {\n      copyButton.textContent = 'Copy';\n    }, 1000);\n  }\n\n  _textAreaWithClonedContent() {\n    const textarea = document.createElement('textarea');\n    document.body.appendChild(textarea);\n    textarea.value = this._cleanIndentation(this._getCodeTemplate().innerHTML);\n\n    return textarea;\n  }\n}\n\ncustomElements.define('code-sample', CodeSample);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive so that lit-html will call the function\n * during template rendering, rather than passing as a value.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object\n *\n * @example\n *\n * ```\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n * ```\n */\n// tslint:disable-next-line:no-any\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        const _prepareTemplate = (template) => {\n            const content = template.content;\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            // Keeps track of the last index associated with a part. We try to delete\n            // unnecessary nodes, but we never want to associate two different parts\n            // to the same index. They must have a constant node between.\n            let lastPartIndex = 0;\n            while (walker.nextNode()) {\n                index++;\n                const node = walker.currentNode;\n                if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                    if (node.hasAttributes()) {\n                        const attributes = node.attributes;\n                        // Per\n                        // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                        // attributes are not guaranteed to be returned in document order.\n                        // In particular, Edge/IE can return them out of order, so we cannot\n                        // assume a correspondance between part index and attribute index.\n                        let count = 0;\n                        for (let i = 0; i < attributes.length; i++) {\n                            if (attributes[i].value.indexOf(marker) >= 0) {\n                                count++;\n                            }\n                        }\n                        while (count-- > 0) {\n                            // Get the template literal section leading up to the first\n                            // expression in this attribute\n                            const stringForPart = result.strings[partIndex];\n                            // Find the attribute name\n                            const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                            // Find the corresponding attribute\n                            // All bound attributes have had a suffix added in\n                            // TemplateResult#getHTML to opt out of special attribute\n                            // handling. To look up the attribute value we also need to add\n                            // the suffix.\n                            const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                            const attributeValue = node.getAttribute(attributeLookupName);\n                            const strings = attributeValue.split(markerRegex);\n                            this.parts.push({ type: 'attribute', index, name, strings });\n                            node.removeAttribute(attributeLookupName);\n                            partIndex += strings.length - 1;\n                        }\n                    }\n                    if (node.tagName === 'TEMPLATE') {\n                        _prepareTemplate(node);\n                    }\n                }\n                else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                    const data = node.data;\n                    if (data.indexOf(marker) >= 0) {\n                        const parent = node.parentNode;\n                        const strings = data.split(markerRegex);\n                        const lastIndex = strings.length - 1;\n                        // Generate a new text node for each literal section\n                        // These nodes are also used as the markers for node parts\n                        for (let i = 0; i < lastIndex; i++) {\n                            parent.insertBefore((strings[i] === '') ? createMarker() :\n                                document.createTextNode(strings[i]), node);\n                            this.parts.push({ type: 'node', index: ++index });\n                        }\n                        // If there's no text, we must insert a comment to mark our place.\n                        // Else, we can trust it will stick around after cloning.\n                        if (strings[lastIndex] === '') {\n                            parent.insertBefore(createMarker(), node);\n                            nodesToRemove.push(node);\n                        }\n                        else {\n                            node.data = strings[lastIndex];\n                        }\n                        // We have a part for each match found\n                        partIndex += lastIndex;\n                    }\n                }\n                else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                    if (node.data === marker) {\n                        const parent = node.parentNode;\n                        // Add a new marker node to be the startNode of the Part if any of\n                        // the following are true:\n                        //  * We don't have a previousSibling\n                        //  * The previousSibling is already the start of a previous part\n                        if (node.previousSibling === null || index === lastPartIndex) {\n                            index++;\n                            parent.insertBefore(createMarker(), node);\n                        }\n                        lastPartIndex = index;\n                        this.parts.push({ type: 'node', index });\n                        // If we don't have a nextSibling, keep this node so we have an end.\n                        // Else, we can remove it to save future costs.\n                        if (node.nextSibling === null) {\n                            node.data = '';\n                        }\n                        else {\n                            nodesToRemove.push(node);\n                            index--;\n                        }\n                        partIndex++;\n                    }\n                    else {\n                        let i = -1;\n                        while ((i = node.data.indexOf(marker, i + 1)) !==\n                            -1) {\n                            // Comment node has a binding marker inside, make an inactive part\n                            // The binding won't work, but subsequent bindings will\n                            // TODO (justinfagnani): consider whether it's even worth it to\n                            // make bindings in comments work\n                            this.parts.push({ type: 'node', index: -1 });\n                        }\n                    }\n                }\n            }\n        };\n        _prepareTemplate(element);\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this._parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this._parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // When using the Custom Elements polyfill, clone the node, rather than\n        // importing it, to keep the fragment in the template's document. This\n        // leaves the fragment inert so custom elements won't upgrade and\n        // potentially modify their contents by creating a polyfilled ShadowRoot\n        // while we traverse the tree.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const parts = this.template.parts;\n        let partIndex = 0;\n        let nodeIndex = 0;\n        const _prepareInstance = (fragment) => {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n            let node = walker.nextNode();\n            // Loop through all the nodes and parts of a template\n            while (partIndex < parts.length && node !== null) {\n                const part = parts[partIndex];\n                // Consecutive Parts may have the same node index, in the case of\n                // multiple bound attributes on an element. So each iteration we either\n                // increment the nodeIndex, if we aren't on a node with a part, or the\n                // partIndex if we are. By not incrementing the nodeIndex when we find a\n                // part, we allow for the next part to be associated with the current\n                // node if neccessasry.\n                if (!isTemplatePartActive(part)) {\n                    this._parts.push(undefined);\n                    partIndex++;\n                }\n                else if (nodeIndex === part.index) {\n                    if (part.type === 'node') {\n                        const part = this.processor.handleTextExpression(this.options);\n                        part.insertAfterNode(node.previousSibling);\n                        this._parts.push(part);\n                    }\n                    else {\n                        this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n                    }\n                    partIndex++;\n                }\n                else {\n                    nodeIndex++;\n                    if (node.nodeName === 'TEMPLATE') {\n                        _prepareInstance(node.content);\n                    }\n                    node = walker.nextNode();\n                }\n            }\n        };\n        _prepareInstance(fragment);\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const endIndex = this.strings.length - 1;\n        let html = '';\n        for (let i = 0; i < endIndex; i++) {\n            const s = this.strings[i];\n            // This exec() call does two things:\n            // 1) Appends a suffix to the bound attribute name to opt out of special\n            // attribute value parsing that IE11 and Edge do, like for style and\n            // many SVG attributes. The Template class also appends the same suffix\n            // when looking up attributes to create Parts.\n            // 2) Adds an unquoted-attribute-safe marker for the first expression in\n            // an attribute. Subsequent attribute expressions will use node markers,\n            // and this is safe since attributes with multiple expressions are\n            // guaranteed to be quoted.\n            const match = lastAttributeNameRegex.exec(s);\n            if (match) {\n                // We're starting a new bound attribute.\n                // Add the safe attribute suffix, and use unquoted-attribute-safe\n                // marker.\n                html += s.substr(0, match.index) + match[1] + match[2] +\n                    boundAttributeSuffix + match[3] + marker;\n            }\n            else {\n                // We're either in a bound node, or trailing bound attribute.\n                // Either way, nodeMarker is safe to use.\n                html += s + nodeMarker;\n            }\n        }\n        return html + this.strings[endIndex];\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\n/**\n * Sets attribute values for AttributeParts, so that the value is only set once\n * even if there are multiple parts for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (v != null &&\n                    (Array.isArray(v) ||\n                        // tslint:disable-next-line:no-any\n                        typeof v !== 'string' && v[Symbol.iterator])) {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n                else {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\nexport class AttributePart {\n    constructor(comitter) {\n        this.value = undefined;\n        this.committer = comitter;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Inserts this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and\n     * its next sibling must be static, unchanging nodes such as those that appear\n     * in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part._insert(this.startNode = createMarker());\n        part._insert(this.endNode = createMarker());\n    }\n    /**\n     * Appends this part after `ref`\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref._insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        const value = this._pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this._commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this._commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this._commitNode(value);\n        }\n        else if (Array.isArray(value) ||\n            // tslint:disable-next-line:no-any\n            value[Symbol.iterator]) {\n            this._commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this._commitText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this.value = value;\n    }\n    _commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    _commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this._commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    _commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const value = !!this._pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        this.value = value;\n        this._pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this._pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this._boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this._pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this._pendingValue)) {\n            const directive = this._pendingValue;\n            this._pendingValue = noChange;\n            directive(this);\n        }\n        if (this._pendingValue === noChange) {\n            return;\n        }\n        const newListener = this._pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        if (shouldAddListener) {\n            this._options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);\n        }\n        this.value = newListener;\n        this._pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const comitter = new PropertyCommitter(element, name.slice(1), strings);\n            return comitter.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const comitter = new AttributeCommitter(element, name, strings);\n        return comitter.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):e.Navigo=t()}(this,function(){\"use strict\";var e=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e};function t(){return!(\"undefined\"==typeof window||!window.history||!window.history.pushState)}function n(e,n,o){this.root=null,this._routes=[],this._useHash=n,this._hash=void 0===o?\"#\":o,this._paused=!1,this._destroyed=!1,this._lastRouteResolved=null,this._notFoundHandler=null,this._defaultHandler=null,this._usePushState=!n&&t(),this._onLocationChange=this._onLocationChange.bind(this),this._genericHooks=null,this._historyAPIUpdateMethod=\"pushState\",e?this.root=n?e.replace(/\\/$/,\"/\"+this._hash):e.replace(/\\/$/,\"\"):n&&(this.root=this._cLoc().split(this._hash)[0].replace(/\\/$/,\"/\"+this._hash)),this._listen(),this.updatePageLinks()}function o(e){return e instanceof RegExp?e:e.replace(/\\/+$/,\"\").replace(/^\\/+/,\"^/\")}function i(e){return e.replace(/\\/$/,\"\").split(\"/\").length}function s(e,t){return i(t)-i(e)}function r(e,t){return function(e){return(arguments.length>1&&void 0!==arguments[1]?arguments[1]:[]).map(function(t){var i=function(e){var t=[];return{regexp:e instanceof RegExp?e:new RegExp(e.replace(n.PARAMETER_REGEXP,function(e,o,i){return t.push(i),n.REPLACE_VARIABLE_REGEXP}).replace(n.WILDCARD_REGEXP,n.REPLACE_WILDCARD)+n.FOLLOWED_BY_SLASH_REGEXP,n.MATCH_REGEXP_FLAGS),paramNames:t}}(o(t.route)),s=i.regexp,r=i.paramNames,a=e.replace(/^\\/+/,\"/\").match(s),h=function(e,t){return 0===t.length?null:e?e.slice(1,e.length).reduce(function(e,n,o){return null===e&&(e={}),e[t[o]]=decodeURIComponent(n),e},null):null}(a,r);return!!a&&{match:a,route:t,params:h}}).filter(function(e){return e})}(e,t)[0]||!1}function a(e,t){var n=t.map(function(t){return\"\"===t.route||\"*\"===t.route?e:e.split(new RegExp(t.route+\"($|/)\"))[0]}),i=o(e);return n.length>1?n.reduce(function(e,t){return e.length>t.length&&(e=t),e},n[0]):1===n.length?n[0]:i}function h(e,n,o){var i,s=function(e){return e.split(/\\?(.*)?$/)[0]};return void 0===o&&(o=\"#\"),t()&&!n?s(e).split(o)[0]:(i=e.split(o)).length>1?s(i[1]):s(i[0])}function u(t,n,o){if(n&&\"object\"===(void 0===n?\"undefined\":e(n))){if(n.before)return void n.before(function(){(!(arguments.length>0&&void 0!==arguments[0])||arguments[0])&&(t(),n.after&&n.after(o))},o);if(n.after)return t(),void(n.after&&n.after(o))}t()}return n.prototype={helpers:{match:r,root:a,clean:o,getOnlyURL:h},navigate:function(e,t){var n;return e=e||\"\",this._usePushState?(n=(n=(t?\"\":this._getRoot()+\"/\")+e.replace(/^\\/+/,\"/\")).replace(/([^:])(\\/{2,})/g,\"$1/\"),history[this._historyAPIUpdateMethod]({},\"\",n),this.resolve()):\"undefined\"!=typeof window&&(e=e.replace(new RegExp(\"^\"+this._hash),\"\"),window.location.href=window.location.href.replace(/#$/,\"\").replace(new RegExp(this._hash+\".*$\"),\"\")+this._hash+e),this},on:function(){for(var t=this,n=arguments.length,o=Array(n),i=0;i<n;i++)o[i]=arguments[i];if(\"function\"==typeof o[0])this._defaultHandler={handler:o[0],hooks:o[1]};else if(o.length>=2)if(\"/\"===o[0]){var r=o[1];\"object\"===e(o[1])&&(r=o[1].uses),this._defaultHandler={handler:r,hooks:o[2]}}else this._add(o[0],o[1],o[2]);else\"object\"===e(o[0])&&Object.keys(o[0]).sort(s).forEach(function(e){t.on(e,o[0][e])});return this},off:function(e){return null!==this._defaultHandler&&e===this._defaultHandler.handler?this._defaultHandler=null:null!==this._notFoundHandler&&e===this._notFoundHandler.handler&&(this._notFoundHandler=null),this._routes=this._routes.reduce(function(t,n){return n.handler!==e&&t.push(n),t},[]),this},notFound:function(e,t){return this._notFoundHandler={handler:e,hooks:t},this},resolve:function(e){var n,o,i=this,s=(e||this._cLoc()).replace(this._getRoot(),\"\");this._useHash&&(s=s.replace(new RegExp(\"^/\"+this._hash),\"/\"));var a=function(e){return e.split(/\\?(.*)?$/).slice(1).join(\"\")}(e||this._cLoc()),l=h(s,this._useHash,this._hash);return!this._paused&&(this._lastRouteResolved&&l===this._lastRouteResolved.url&&a===this._lastRouteResolved.query?(this._lastRouteResolved.hooks&&this._lastRouteResolved.hooks.already&&this._lastRouteResolved.hooks.already(this._lastRouteResolved.params),!1):(o=r(l,this._routes))?(this._callLeave(),this._lastRouteResolved={url:l,query:a,hooks:o.route.hooks,params:o.params,name:o.route.name},n=o.route.handler,u(function(){u(function(){o.route.route instanceof RegExp?n.apply(void 0,o.match.slice(1,o.match.length)):n(o.params,a)},o.route.hooks,o.params,i._genericHooks)},this._genericHooks,o.params),o):this._defaultHandler&&(\"\"===l||\"/\"===l||l===this._hash||function(e,n,o){if(t()&&!n)return!1;if(!e.match(o))return!1;var i=e.split(o);return i.length<2||\"\"===i[1]}(l,this._useHash,this._hash))?(u(function(){u(function(){i._callLeave(),i._lastRouteResolved={url:l,query:a,hooks:i._defaultHandler.hooks},i._defaultHandler.handler(a)},i._defaultHandler.hooks)},this._genericHooks),!0):(this._notFoundHandler&&u(function(){u(function(){i._callLeave(),i._lastRouteResolved={url:l,query:a,hooks:i._notFoundHandler.hooks},i._notFoundHandler.handler(a)},i._notFoundHandler.hooks)},this._genericHooks),!1))},destroy:function(){this._routes=[],this._destroyed=!0,this._lastRouteResolved=null,this._genericHooks=null,clearTimeout(this._listeningInterval),\"undefined\"!=typeof window&&(window.removeEventListener(\"popstate\",this._onLocationChange),window.removeEventListener(\"hashchange\",this._onLocationChange))},updatePageLinks:function(){var e=this;\"undefined\"!=typeof document&&this._findLinks().forEach(function(t){t.hasListenerAttached||(t.addEventListener(\"click\",function(n){if((n.ctrlKey||n.metaKey)&&\"a\"==n.target.tagName.toLowerCase())return!1;var o=e.getLinkPath(t);e._destroyed||(n.preventDefault(),e.navigate(o.replace(/\\/+$/,\"\").replace(/^\\/+/,\"/\")))}),t.hasListenerAttached=!0)})},generate:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this._routes.reduce(function(n,o){var i;if(o.name===e)for(i in n=o.route,t)n=n.toString().replace(\":\"+i,t[i]);return n},\"\");return this._useHash?this._hash+n:n},link:function(e){return this._getRoot()+e},pause:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];this._paused=e,this._historyAPIUpdateMethod=e?\"replaceState\":\"pushState\"},resume:function(){this.pause(!1)},historyAPIUpdateMethod:function(e){return void 0===e?this._historyAPIUpdateMethod:(this._historyAPIUpdateMethod=e,e)},disableIfAPINotAvailable:function(){t()||this.destroy()},lastRouteResolved:function(){return this._lastRouteResolved},getLinkPath:function(e){return e.getAttribute(\"href\")},hooks:function(e){this._genericHooks=e},_add:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return\"string\"==typeof t&&(t=encodeURI(t)),this._routes.push(\"object\"===(void 0===n?\"undefined\":e(n))?{route:t,handler:n.uses,name:n.as,hooks:o||n.hooks}:{route:t,handler:n,hooks:o}),this._add},_getRoot:function(){return null!==this.root?this.root:(this.root=a(this._cLoc().split(\"?\")[0],this._routes),this.root)},_listen:function(){var e=this;if(this._usePushState)window.addEventListener(\"popstate\",this._onLocationChange);else if(\"undefined\"!=typeof window&&\"onhashchange\"in window)window.addEventListener(\"hashchange\",this._onLocationChange);else{var t=this._cLoc(),n=void 0,o=void 0;(o=function(){n=e._cLoc(),t!==n&&(t=n,e.resolve()),e._listeningInterval=setTimeout(o,200)})()}},_cLoc:function(){return\"undefined\"!=typeof window?void 0!==window.__NAVIGO_WINDOW_LOCATION_MOCK__?window.__NAVIGO_WINDOW_LOCATION_MOCK__:o(window.location.href):\"\"},_findLinks:function(){return[].slice.call(document.querySelectorAll(\"[data-navigo]\"))},_onLocationChange:function(){this.resolve()},_callLeave:function(){var e=this._lastRouteResolved;e&&e.hooks&&e.hooks.leave&&e.hooks.leave(e.params)}},n.PARAMETER_REGEXP=/([:*])(\\w+)/g,n.WILDCARD_REGEXP=/\\*/g,n.REPLACE_VARIABLE_REGEXP=\"([^/]+)\",n.REPLACE_WILDCARD=\"(?:.*)\",n.FOLLOWED_BY_SLASH_REGEXP=\"(?:/$|$)\",n.MATCH_REGEXP_FLAGS=\"\",n});\n//# sourceMappingURL=navigo.min.js.map\n","\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst lit_html_1 = require(\"lit-html\");\r\nconst shadow_css_1 = __importDefault(require(\"shadow-css\"));\r\nconst camel_to_kebab_1 = __importDefault(require(\"camel-to-kebab\"));\r\nconst camelcase_1 = __importDefault(require(\"camelcase\"));\r\nconst scheduler_1 = require(\"./scheduler\");\r\nexports.Json = (v) => {\r\n    try {\r\n        return JSON.parse(v);\r\n    }\r\n    catch (e) {\r\n        return undefined;\r\n    }\r\n};\r\nexports.register = (elementName, component, properties = {}) => {\r\n    const propertyKeys = (properties ? Object.getOwnPropertyNames(properties) : []);\r\n    class GhElement extends HTMLElement {\r\n        constructor() {\r\n            super();\r\n            this.beforeRender = () => {\r\n                this._effectsIndex = 0;\r\n                this._statesIndex = 0;\r\n                this._beforeRender.forEach(f => f());\r\n                this._beforeRender = [];\r\n            };\r\n            this.render = () => {\r\n                const template = component(this._properties, {\r\n                    useCallback: ((s) => s),\r\n                    useEffect: this.useEffect,\r\n                    useMemo: this.useMemo,\r\n                    useState: this.useState\r\n                });\r\n                lit_html_1.render(template, this.shadowRoot);\r\n                const style = this.shadowRoot.querySelector(\"style\");\r\n                if (style) {\r\n                    const newStyles = shadow_css_1.default(style.innerText)(this);\r\n                    style.cssText = newStyles || \"\";\r\n                }\r\n            };\r\n            this.afterRender = () => {\r\n                this._afterRender.forEach(f => f());\r\n                this._afterRender = [];\r\n            };\r\n            this.useEffect = (effect, deps = []) => {\r\n                const index = this._effectsIndex++;\r\n                const lastEffect = this._effects[index] || { deps: [] };\r\n                if (index >= this._effects.length || this.diffDeps(this._effects[index].deps, deps)) {\r\n                    this._afterRender.push(() => {\r\n                        if (lastEffect.cleanup) {\r\n                            lastEffect.cleanup();\r\n                        }\r\n                        const cleanup = effect();\r\n                        this._effects[index] = {\r\n                            deps,\r\n                            cleanup\r\n                        };\r\n                    });\r\n                }\r\n            };\r\n            this.useState = (initialValue) => {\r\n                const index = this._statesIndex++;\r\n                if (index >= this._states.length) {\r\n                    this._states.push(initialValue);\r\n                }\r\n                return [\r\n                    this._states[index],\r\n                    (newValue) => {\r\n                        if (this._states[index] !== newValue) {\r\n                            this._beforeRender.push(() => {\r\n                                this._states[index] = newValue;\r\n                            });\r\n                            this.invalidate();\r\n                        }\r\n                    }\r\n                ];\r\n            };\r\n            this.useMemo = (memo, deps = []) => {\r\n                const index = this._memosIndex++;\r\n                const first = index >= this._memos.length;\r\n                if (first || this.diffDeps(this._memos[index].deps, deps)) {\r\n                    const value = memo();\r\n                    if (first)\r\n                        this._memos.push({ deps, value });\r\n                    else\r\n                        this._memos[index] = { deps, value };\r\n                }\r\n                return this._memos[index].value;\r\n            };\r\n            this.invalidate = (async = true) => {\r\n                if (this._needsUpdate === true)\r\n                    return;\r\n                this._needsUpdate = true;\r\n                const run = () => {\r\n                    if (this._needsUpdate) {\r\n                        this.beforeRender();\r\n                        this.render();\r\n                        this._needsUpdate = false;\r\n                        this.afterRender();\r\n                    }\r\n                    if (this._needsUpdate) {\r\n                        scheduler_1.schedule(run);\r\n                    }\r\n                };\r\n                if (async)\r\n                    scheduler_1.schedule(run);\r\n                else\r\n                    run();\r\n            };\r\n            this.diffDeps = (last, current) => {\r\n                if (last.length !== current.length) {\r\n                    return true;\r\n                }\r\n                for (let i = 0; i < current.length; i++) {\r\n                    if (last[i] !== current[i]) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            };\r\n            this._afterRender = [];\r\n            this._beforeRender = [];\r\n            this._effects = [];\r\n            this._effectsIndex = 0;\r\n            this._states = [];\r\n            this._statesIndex = 0;\r\n            this._memos = [];\r\n            this._memosIndex = 0;\r\n            this._properties = {};\r\n            this._needsUpdate = false;\r\n            this.attachShadow({ mode: 'open' });\r\n        }\r\n        static get observedAttributes() {\r\n            return (properties && Object.getOwnPropertyNames(properties).map(p => properties[p].attributeName || camel_to_kebab_1.default(p))) || [];\r\n        }\r\n        connectedCallback() {\r\n            this.invalidate(false);\r\n        }\r\n        attributeChangedCallback(attributeName, oldValue, newValue) {\r\n            if (oldValue === newValue)\r\n                return;\r\n            const propertyName = Object\r\n                .getOwnPropertyNames(properties)\r\n                .find(key => properties[key].attributeName === attributeName) || camelcase_1.default(attributeName);\r\n            const parse = (newValue) => {\r\n                const declaration = properties[propertyName];\r\n                if (!declaration)\r\n                    return newValue;\r\n                if (declaration.type === Boolean) {\r\n                    return newValue === \"true\";\r\n                }\r\n                return declaration.type(newValue);\r\n            };\r\n            this._beforeRender.push(() => {\r\n                this._properties[propertyName] = parse(newValue);\r\n            });\r\n            this.invalidate();\r\n        }\r\n        disconnectedCallback() {\r\n            this._effects.forEach((e) => {\r\n                e.cleanup && e.cleanup();\r\n            });\r\n        }\r\n    }\r\n    propertyKeys.forEach(propertyKey => {\r\n        Object.defineProperty(GhElement.prototype, propertyKey, {\r\n            get() {\r\n                return this._properties[propertyKey];\r\n            },\r\n            set(v) {\r\n                this._properties[propertyKey] = v;\r\n                this.invalidate();\r\n            }\r\n        });\r\n    });\r\n    customElements.define(elementName, GhElement);\r\n};\r\n//# sourceMappingURL=gh-element.js.map","var e={},t=new WeakMap,n=\"undefined\"!=typeof customElements&&customElements.define.toString().indexOf(\"native code\")>-1,o=/^\\s*\\.([a-zA-Z0-9]+)/g,r=/:host([\\s\\{])/g,s=/:host-context\\(([^)]+)\\)/g,c=/:host\\(([^)]+)\\)/g,u=0,a=0;function i(e,t){var n=document.createElement(\"style\");t&&n.setAttribute(\"scope\",t),n.textContent=e,document.head.appendChild(n)}module.exports=function(p){return function(d){if(n)return p;if(d){var l=t.get(d);l||t.set(d,l=++u),e[l]||(e[l]={}),e[l][p]?d.setAttribute(\"__scope-\"+e[l][p],\"\"):(e[l][p]=++a,d.setAttribute(\"__scope-\"+e[l][p],\"\"),i(function(t,n){var u=\"[__scope-\"+e[t][n]+\"]\",a=n;return a=(a=(a=(a=a.replace(o,u+\" .$1\")).replace(r,u+\"$1\")).replace(s,\"$1 \"+u)).replace(c,u+\"$1\")}(l,p),a))}else i(p)}};\n//# sourceMappingURL=dist.js.map\n","// github.com/pineapplemachine/camel-to-kebab-js\n// zlib/libpng license https://opensource.org/licenses/zlib-license.php\n// Copyright (c) 2018 Sophie Kirschner (sophiek@pineapplemachine.com)\n\n// Converts a camelCase input string to kebab-case output.\n// If the input is not a string, it will be coerced to one.\nfunction camelToKebabCase(text){\n    // When the input was null or undefined, return that same value\n    if(text === null || text === undefined){\n        return text;\n    }\n    // The output string, to be built in the loop\n    var result = \"\";\n    // Counts consecutive upper-case characters\n    var upper = 0;\n    // True when the last character was a number and false when the last\n    // character was something other than a number\n    var numeric = undefined;\n    // Enumerate characters in the input string\n    var string = String(text);\n    for(var i = 0; i < string.length; i++){\n        var ch = string[i];\n        var chLower = ch.toLowerCase();\n        // If it's an upper-case letter (not preceded by ascii whitespace):\n        if(ch !== chLower){\n            var prev = result[result.length - 1];\n            // Handle cases like \"innerHTML\" => \"inner-html\",\n            // NOT \"inner-h-t-m-l\"\n            if(upper > 1 && result.length > 1){\n                result = result.slice(0, result.length - 2) + prev;\n            }\n            // Add a hyphen (but not at the beginning of the output, and not\n            // two in a row, and not after whitespace)\n            if(result.length && prev !== \"-\" &&\n                prev !== \" \" && prev !== \"\\t\" && prev !== \"\\r\" && prev !== \"\\n\"\n            ){\n                result += \"-\";\n            }\n            // Append the lower-case character\n            result += chLower;\n            // Update upper-case and numeric state\n            upper++;\n            numeric = false;\n        // If it's a number:\n        }else if(\n            ch === \"0\" || ch === \"1\" || ch === \"2\" || ch === \"3\" ||\n            ch === \"4\" || ch === \"5\" || ch === \"6\" || ch === \"7\" ||\n            ch === \"8\" || ch === \"9\"\n        ){\n            // Add a hyphen if the last character wasn't a number (but not\n            // two hyphens in a row)\n            if(numeric === false && result[result.length - 1] !== \"-\"){\n                result += \"-\";\n            }\n            // Append the numeric character\n            result += ch;\n            // Update upper-case and numeric state\n            upper = 0;\n            numeric = true;\n        // If it's not upper case or a number, but the last character was numeric:\n        }else if(numeric && result[result.length - 1] !== \"-\"){\n            // Append a hyphen and then the character\n            result += \"-\" + ch;\n            // Update upper-case and numeric state\n            upper = 0;\n            numeric = false;\n        // If it's not upper case or numeric, and not following a number:\n        }else{\n            // Append the character\n            result += ch;\n            // Update upper-case and numeric state\n            upper = 0;\n            numeric = false;\n        }\n    }\n    // Handle cases like \"innerHTML\" => \"inner-html\", NOT \"inner-htm-l\"\n    if(upper > 1 && result.length > 1){\n        result = result.slice(0, result.length - 2) + result[result.length - 1];\n    }\n    // All done!\n    return result;\n}\n\n// Export it\nif(typeof(module) !== \"undefined\"){\n    module.exports = camelToKebabCase;\n}\nif(typeof(window) !== \"undefined\"){\n    window.camelToKebabCase = camelToKebabCase;\n}\n","'use strict';\n\nconst preserveCamelCase = string => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = Object.assign({\n\t\tpascalCase: false\n\t}, options);\n\n\tconst postProcess = x => options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n\t}\n\n\tconst hasUpperCase = input !== input.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input);\n\t}\n\n\tinput = input\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (_, p1) => p1.toUpperCase())\n\t\t.replace(/\\d+(\\w|$)/g, m => m.toUpperCase());\n\n\treturn postProcess(input);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nlet needsUpdate = false;\r\nlet queue = [];\r\nfunction schedule(task) {\r\n    queue.push(task);\r\n    if (!needsUpdate) {\r\n        needsUpdate = true;\r\n        const run = () => {\r\n            while (queue.length > 0) {\r\n                queue.shift()();\r\n            }\r\n            if (queue.length === 0) {\r\n                needsUpdate = needsUpdate = false;\r\n            }\r\n            else {\r\n                window.requestAnimationFrame(run);\r\n            }\r\n        };\r\n        window.requestAnimationFrame(run);\r\n    }\r\n}\r\nexports.schedule = schedule;\r\n//# sourceMappingURL=scheduler.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar lit_html_1 = require(\"lit-html\");\r\nexports.html = lit_html_1.html;\r\nexports.nothing = lit_html_1.nothing;\r\n//# sourceMappingURL=types.js.map","/*! highlight.js v9.12.0 | BSD3 License | git.io/hljslicense */\n!function(e){var n=\"object\"==typeof window&&window||\"object\"==typeof self&&self;\"undefined\"!=typeof exports?e(exports):n&&(n.hljs=e({}),\"function\"==typeof define&&define.amd&&define([],function(){return n.hljs}))}(function(e){function n(e){return e.replace(/&/g,\"&amp;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\")}function t(e){return e.nodeName.toLowerCase()}function r(e,n){var t=e&&e.exec(n);return t&&0===t.index}function a(e){return k.test(e)}function i(e){var n,t,r,i,o=e.className+\" \";if(o+=e.parentNode?e.parentNode.className:\"\",t=B.exec(o))return w(t[1])?t[1]:\"no-highlight\";for(o=o.split(/\\s+/),n=0,r=o.length;r>n;n++)if(i=o[n],a(i)||w(i))return i}function o(e){var n,t={},r=Array.prototype.slice.call(arguments,1);for(n in e)t[n]=e[n];return r.forEach(function(e){for(n in e)t[n]=e[n]}),t}function u(e){var n=[];return function r(e,a){for(var i=e.firstChild;i;i=i.nextSibling)3===i.nodeType?a+=i.nodeValue.length:1===i.nodeType&&(n.push({event:\"start\",offset:a,node:i}),a=r(i,a),t(i).match(/br|hr|img|input/)||n.push({event:\"stop\",offset:a,node:i}));return a}(e,0),n}function c(e,r,a){function i(){return e.length&&r.length?e[0].offset!==r[0].offset?e[0].offset<r[0].offset?e:r:\"start\"===r[0].event?e:r:e.length?e:r}function o(e){function r(e){return\" \"+e.nodeName+'=\"'+n(e.value).replace('\"',\"&quot;\")+'\"'}s+=\"<\"+t(e)+E.map.call(e.attributes,r).join(\"\")+\">\"}function u(e){s+=\"</\"+t(e)+\">\"}function c(e){(\"start\"===e.event?o:u)(e.node)}for(var l=0,s=\"\",f=[];e.length||r.length;){var g=i();if(s+=n(a.substring(l,g[0].offset)),l=g[0].offset,g===e){f.reverse().forEach(u);do c(g.splice(0,1)[0]),g=i();while(g===e&&g.length&&g[0].offset===l);f.reverse().forEach(o)}else\"start\"===g[0].event?f.push(g[0].node):f.pop(),c(g.splice(0,1)[0])}return s+n(a.substr(l))}function l(e){return e.v&&!e.cached_variants&&(e.cached_variants=e.v.map(function(n){return o(e,{v:null},n)})),e.cached_variants||e.eW&&[o(e)]||[e]}function s(e){function n(e){return e&&e.source||e}function t(t,r){return new RegExp(n(t),\"m\"+(e.cI?\"i\":\"\")+(r?\"g\":\"\"))}function r(a,i){if(!a.compiled){if(a.compiled=!0,a.k=a.k||a.bK,a.k){var o={},u=function(n,t){e.cI&&(t=t.toLowerCase()),t.split(\" \").forEach(function(e){var t=e.split(\"|\");o[t[0]]=[n,t[1]?Number(t[1]):1]})};\"string\"==typeof a.k?u(\"keyword\",a.k):x(a.k).forEach(function(e){u(e,a.k[e])}),a.k=o}a.lR=t(a.l||/\\w+/,!0),i&&(a.bK&&(a.b=\"\\\\b(\"+a.bK.split(\" \").join(\"|\")+\")\\\\b\"),a.b||(a.b=/\\B|\\b/),a.bR=t(a.b),a.e||a.eW||(a.e=/\\B|\\b/),a.e&&(a.eR=t(a.e)),a.tE=n(a.e)||\"\",a.eW&&i.tE&&(a.tE+=(a.e?\"|\":\"\")+i.tE)),a.i&&(a.iR=t(a.i)),null==a.r&&(a.r=1),a.c||(a.c=[]),a.c=Array.prototype.concat.apply([],a.c.map(function(e){return l(\"self\"===e?a:e)})),a.c.forEach(function(e){r(e,a)}),a.starts&&r(a.starts,i);var c=a.c.map(function(e){return e.bK?\"\\\\.?(\"+e.b+\")\\\\.?\":e.b}).concat([a.tE,a.i]).map(n).filter(Boolean);a.t=c.length?t(c.join(\"|\"),!0):{exec:function(){return null}}}}r(e)}function f(e,t,a,i){function o(e,n){var t,a;for(t=0,a=n.c.length;a>t;t++)if(r(n.c[t].bR,e))return n.c[t]}function u(e,n){if(r(e.eR,n)){for(;e.endsParent&&e.parent;)e=e.parent;return e}return e.eW?u(e.parent,n):void 0}function c(e,n){return!a&&r(n.iR,e)}function l(e,n){var t=N.cI?n[0].toLowerCase():n[0];return e.k.hasOwnProperty(t)&&e.k[t]}function p(e,n,t,r){var a=r?\"\":I.classPrefix,i='<span class=\"'+a,o=t?\"\":C;return i+=e+'\">',i+n+o}function h(){var e,t,r,a;if(!E.k)return n(k);for(a=\"\",t=0,E.lR.lastIndex=0,r=E.lR.exec(k);r;)a+=n(k.substring(t,r.index)),e=l(E,r),e?(B+=e[1],a+=p(e[0],n(r[0]))):a+=n(r[0]),t=E.lR.lastIndex,r=E.lR.exec(k);return a+n(k.substr(t))}function d(){var e=\"string\"==typeof E.sL;if(e&&!y[E.sL])return n(k);var t=e?f(E.sL,k,!0,x[E.sL]):g(k,E.sL.length?E.sL:void 0);return E.r>0&&(B+=t.r),e&&(x[E.sL]=t.top),p(t.language,t.value,!1,!0)}function b(){L+=null!=E.sL?d():h(),k=\"\"}function v(e){L+=e.cN?p(e.cN,\"\",!0):\"\",E=Object.create(e,{parent:{value:E}})}function m(e,n){if(k+=e,null==n)return b(),0;var t=o(n,E);if(t)return t.skip?k+=n:(t.eB&&(k+=n),b(),t.rB||t.eB||(k=n)),v(t,n),t.rB?0:n.length;var r=u(E,n);if(r){var a=E;a.skip?k+=n:(a.rE||a.eE||(k+=n),b(),a.eE&&(k=n));do E.cN&&(L+=C),E.skip||(B+=E.r),E=E.parent;while(E!==r.parent);return r.starts&&v(r.starts,\"\"),a.rE?0:n.length}if(c(n,E))throw new Error('Illegal lexeme \"'+n+'\" for mode \"'+(E.cN||\"<unnamed>\")+'\"');return k+=n,n.length||1}var N=w(e);if(!N)throw new Error('Unknown language: \"'+e+'\"');s(N);var R,E=i||N,x={},L=\"\";for(R=E;R!==N;R=R.parent)R.cN&&(L=p(R.cN,\"\",!0)+L);var k=\"\",B=0;try{for(var M,j,O=0;;){if(E.t.lastIndex=O,M=E.t.exec(t),!M)break;j=m(t.substring(O,M.index),M[0]),O=M.index+j}for(m(t.substr(O)),R=E;R.parent;R=R.parent)R.cN&&(L+=C);return{r:B,value:L,language:e,top:E}}catch(T){if(T.message&&-1!==T.message.indexOf(\"Illegal\"))return{r:0,value:n(t)};throw T}}function g(e,t){t=t||I.languages||x(y);var r={r:0,value:n(e)},a=r;return t.filter(w).forEach(function(n){var t=f(n,e,!1);t.language=n,t.r>a.r&&(a=t),t.r>r.r&&(a=r,r=t)}),a.language&&(r.second_best=a),r}function p(e){return I.tabReplace||I.useBR?e.replace(M,function(e,n){return I.useBR&&\"\\n\"===e?\"<br>\":I.tabReplace?n.replace(/\\t/g,I.tabReplace):\"\"}):e}function h(e,n,t){var r=n?L[n]:t,a=[e.trim()];return e.match(/\\bhljs\\b/)||a.push(\"hljs\"),-1===e.indexOf(r)&&a.push(r),a.join(\" \").trim()}function d(e){var n,t,r,o,l,s=i(e);a(s)||(I.useBR?(n=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"div\"),n.innerHTML=e.innerHTML.replace(/\\n/g,\"\").replace(/<br[ \\/]*>/g,\"\\n\")):n=e,l=n.textContent,r=s?f(s,l,!0):g(l),t=u(n),t.length&&(o=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"div\"),o.innerHTML=r.value,r.value=c(t,u(o),l)),r.value=p(r.value),e.innerHTML=r.value,e.className=h(e.className,s,r.language),e.result={language:r.language,re:r.r},r.second_best&&(e.second_best={language:r.second_best.language,re:r.second_best.r}))}function b(e){I=o(I,e)}function v(){if(!v.called){v.called=!0;var e=document.querySelectorAll(\"pre code\");E.forEach.call(e,d)}}function m(){addEventListener(\"DOMContentLoaded\",v,!1),addEventListener(\"load\",v,!1)}function N(n,t){var r=y[n]=t(e);r.aliases&&r.aliases.forEach(function(e){L[e]=n})}function R(){return x(y)}function w(e){return e=(e||\"\").toLowerCase(),y[e]||y[L[e]]}var E=[],x=Object.keys,y={},L={},k=/^(no-?highlight|plain|text)$/i,B=/\\blang(?:uage)?-([\\w-]+)\\b/i,M=/((^(<[^>]+>|\\t|)+|(?:\\n)))/gm,C=\"</span>\",I={classPrefix:\"hljs-\",tabReplace:null,useBR:!1,languages:void 0};return e.highlight=f,e.highlightAuto=g,e.fixMarkup=p,e.highlightBlock=d,e.configure=b,e.initHighlighting=v,e.initHighlightingOnLoad=m,e.registerLanguage=N,e.listLanguages=R,e.getLanguage=w,e.inherit=o,e.IR=\"[a-zA-Z]\\\\w*\",e.UIR=\"[a-zA-Z_]\\\\w*\",e.NR=\"\\\\b\\\\d+(\\\\.\\\\d+)?\",e.CNR=\"(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)\",e.BNR=\"\\\\b(0b[01]+)\",e.RSR=\"!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~\",e.BE={b:\"\\\\\\\\[\\\\s\\\\S]\",r:0},e.ASM={cN:\"string\",b:\"'\",e:\"'\",i:\"\\\\n\",c:[e.BE]},e.QSM={cN:\"string\",b:'\"',e:'\"',i:\"\\\\n\",c:[e.BE]},e.PWM={b:/\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/},e.C=function(n,t,r){var a=e.inherit({cN:\"comment\",b:n,e:t,c:[]},r||{});return a.c.push(e.PWM),a.c.push({cN:\"doctag\",b:\"(?:TODO|FIXME|NOTE|BUG|XXX):\",r:0}),a},e.CLCM=e.C(\"//\",\"$\"),e.CBCM=e.C(\"/\\\\*\",\"\\\\*/\"),e.HCM=e.C(\"#\",\"$\"),e.NM={cN:\"number\",b:e.NR,r:0},e.CNM={cN:\"number\",b:e.CNR,r:0},e.BNM={cN:\"number\",b:e.BNR,r:0},e.CSSNM={cN:\"number\",b:e.NR+\"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?\",r:0},e.RM={cN:\"regexp\",b:/\\//,e:/\\/[gimuy]*/,i:/\\n/,c:[e.BE,{b:/\\[/,e:/\\]/,r:0,c:[e.BE]}]},e.TM={cN:\"title\",b:e.IR,r:0},e.UTM={cN:\"title\",b:e.UIR,r:0},e.METHOD_GUARD={b:\"\\\\.\\\\s*\"+e.UIR,r:0},e});hljs.registerLanguage(\"css\",function(e){var c=\"[a-zA-Z-][a-zA-Z0-9_-]*\",t={b:/[A-Z\\_\\.\\-]+\\s*:/,rB:!0,e:\";\",eW:!0,c:[{cN:\"attribute\",b:/\\S/,e:\":\",eE:!0,starts:{eW:!0,eE:!0,c:[{b:/[\\w-]+\\(/,rB:!0,c:[{cN:\"built_in\",b:/[\\w-]+/},{b:/\\(/,e:/\\)/,c:[e.ASM,e.QSM]}]},e.CSSNM,e.QSM,e.ASM,e.CBCM,{cN:\"number\",b:\"#[0-9A-Fa-f]+\"},{cN:\"meta\",b:\"!important\"}]}}]};return{cI:!0,i:/[=\\/|'\\$]/,c:[e.CBCM,{cN:\"selector-id\",b:/#[A-Za-z0-9_-]+/},{cN:\"selector-class\",b:/\\.[A-Za-z0-9_-]+/},{cN:\"selector-attr\",b:/\\[/,e:/\\]/,i:\"$\"},{cN:\"selector-pseudo\",b:/:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/},{b:\"@(font-face|page)\",l:\"[a-z-]+\",k:\"font-face page\"},{b:\"@\",e:\"[{;]\",i:/:/,c:[{cN:\"keyword\",b:/\\w+/},{b:/\\s/,eW:!0,eE:!0,r:0,c:[e.ASM,e.QSM,e.CSSNM]}]},{cN:\"selector-tag\",b:c,r:0},{b:\"{\",e:\"}\",i:/\\S/,c:[e.CBCM,t]}]}});hljs.registerLanguage(\"bash\",function(e){var t={cN:\"variable\",v:[{b:/\\$[\\w\\d#@][\\w\\d_]*/},{b:/\\$\\{(.*?)}/}]},s={cN:\"string\",b:/\"/,e:/\"/,c:[e.BE,t,{cN:\"variable\",b:/\\$\\(/,e:/\\)/,c:[e.BE]}]},a={cN:\"string\",b:/'/,e:/'/};return{aliases:[\"sh\",\"zsh\"],l:/\\b-?[a-z\\._]+\\b/,k:{keyword:\"if then else elif fi for while in do done case esac function\",literal:\"true false\",built_in:\"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp\",_:\"-ne -eq -lt -gt -f -d -e -s -l -a\"},c:[{cN:\"meta\",b:/^#![^\\n]+sh\\s*$/,r:10},{cN:\"function\",b:/\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,rB:!0,c:[e.inherit(e.TM,{b:/\\w[\\w\\d_]*/})],r:0},e.HCM,s,a,t]}});hljs.registerLanguage(\"http\",function(e){var t=\"HTTP/[0-9\\\\.]+\";return{aliases:[\"https\"],i:\"\\\\S\",c:[{b:\"^\"+t,e:\"$\",c:[{cN:\"number\",b:\"\\\\b\\\\d{3}\\\\b\"}]},{b:\"^[A-Z]+ (.*?) \"+t+\"$\",rB:!0,e:\"$\",c:[{cN:\"string\",b:\" \",e:\" \",eB:!0,eE:!0},{b:t},{cN:\"keyword\",b:\"[A-Z]+\"}]},{cN:\"attribute\",b:\"^\\\\w\",e:\": \",eE:!0,i:\"\\\\n|\\\\s|=\",starts:{e:\"$\",r:0}},{b:\"\\\\n\\\\n\",starts:{sL:[],eW:!0}}]}});hljs.registerLanguage(\"xml\",function(s){var e=\"[A-Za-z0-9\\\\._:-]+\",t={eW:!0,i:/</,r:0,c:[{cN:\"attr\",b:e,r:0},{b:/=\\s*/,r:0,c:[{cN:\"string\",endsParent:!0,v:[{b:/\"/,e:/\"/},{b:/'/,e:/'/},{b:/[^\\s\"'=<>`]+/}]}]}]};return{aliases:[\"html\",\"xhtml\",\"rss\",\"atom\",\"xjb\",\"xsd\",\"xsl\",\"plist\"],cI:!0,c:[{cN:\"meta\",b:\"<!DOCTYPE\",e:\">\",r:10,c:[{b:\"\\\\[\",e:\"\\\\]\"}]},s.C(\"<!--\",\"-->\",{r:10}),{b:\"<\\\\!\\\\[CDATA\\\\[\",e:\"\\\\]\\\\]>\",r:10},{b:/<\\?(php)?/,e:/\\?>/,sL:\"php\",c:[{b:\"/\\\\*\",e:\"\\\\*/\",skip:!0}]},{cN:\"tag\",b:\"<style(?=\\\\s|>|$)\",e:\">\",k:{name:\"style\"},c:[t],starts:{e:\"</style>\",rE:!0,sL:[\"css\",\"xml\"]}},{cN:\"tag\",b:\"<script(?=\\\\s|>|$)\",e:\">\",k:{name:\"script\"},c:[t],starts:{e:\"</script>\",rE:!0,sL:[\"actionscript\",\"javascript\",\"handlebars\",\"xml\"]}},{cN:\"meta\",v:[{b:/<\\?xml/,e:/\\?>/,r:10},{b:/<\\?\\w+/,e:/\\?>/}]},{cN:\"tag\",b:\"</?\",e:\"/?>\",c:[{cN:\"name\",b:/[^\\/><\\s]+/,r:0},t]}]}});hljs.registerLanguage(\"json\",function(e){var i={literal:\"true false null\"},n=[e.QSM,e.CNM],r={e:\",\",eW:!0,eE:!0,c:n,k:i},t={b:\"{\",e:\"}\",c:[{cN:\"attr\",b:/\"/,e:/\"/,c:[e.BE],i:\"\\\\n\"},e.inherit(r,{b:/:/})],i:\"\\\\S\"},c={b:\"\\\\[\",e:\"\\\\]\",c:[e.inherit(r)],i:\"\\\\S\"};return n.splice(n.length,0,t,c),{c:n,k:i,i:\"\\\\S\"}});hljs.registerLanguage(\"javascript\",function(e){var r=\"[A-Za-z$_][0-9A-Za-z$_]*\",t={keyword:\"in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as\",literal:\"true false null undefined NaN Infinity\",built_in:\"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise\"},a={cN:\"number\",v:[{b:\"\\\\b(0[bB][01]+)\"},{b:\"\\\\b(0[oO][0-7]+)\"},{b:e.CNR}],r:0},n={cN:\"subst\",b:\"\\\\$\\\\{\",e:\"\\\\}\",k:t,c:[]},c={cN:\"string\",b:\"`\",e:\"`\",c:[e.BE,n]};n.c=[e.ASM,e.QSM,c,a,e.RM];var s=n.c.concat([e.CBCM,e.CLCM]);return{aliases:[\"js\",\"jsx\"],k:t,c:[{cN:\"meta\",r:10,b:/^\\s*['\"]use (strict|asm)['\"]/},{cN:\"meta\",b:/^#!/,e:/$/},e.ASM,e.QSM,c,e.CLCM,e.CBCM,a,{b:/[{,]\\s*/,r:0,c:[{b:r+\"\\\\s*:\",rB:!0,r:0,c:[{cN:\"attr\",b:r,r:0}]}]},{b:\"(\"+e.RSR+\"|\\\\b(case|return|throw)\\\\b)\\\\s*\",k:\"return throw case\",c:[e.CLCM,e.CBCM,e.RM,{cN:\"function\",b:\"(\\\\(.*?\\\\)|\"+r+\")\\\\s*=>\",rB:!0,e:\"\\\\s*=>\",c:[{cN:\"params\",v:[{b:r},{b:/\\(\\s*\\)/},{b:/\\(/,e:/\\)/,eB:!0,eE:!0,k:t,c:s}]}]},{b:/</,e:/(\\/\\w+|\\w+\\/)>/,sL:\"xml\",c:[{b:/<\\w+\\s*\\/>/,skip:!0},{b:/<\\w+/,e:/(\\/\\w+|\\w+\\/)>/,skip:!0,c:[{b:/<\\w+\\s*\\/>/,skip:!0},\"self\"]}]}],r:0},{cN:\"function\",bK:\"function\",e:/\\{/,eE:!0,c:[e.inherit(e.TM,{b:r}),{cN:\"params\",b:/\\(/,e:/\\)/,eB:!0,eE:!0,c:s}],i:/\\[|%/},{b:/\\$[(.]/},e.METHOD_GUARD,{cN:\"class\",bK:\"class\",e:/[{;=]/,eE:!0,i:/[:\"\\[\\]]/,c:[{bK:\"extends\"},e.UTM]},{bK:\"constructor\",e:/\\{/,eE:!0}],i:/#(?!!)/}});hljs.registerLanguage(\"markdown\",function(e){return{aliases:[\"md\",\"mkdown\",\"mkd\"],c:[{cN:\"section\",v:[{b:\"^#{1,6}\",e:\"$\"},{b:\"^.+?\\\\n[=-]{2,}$\"}]},{b:\"<\",e:\">\",sL:\"xml\",r:0},{cN:\"bullet\",b:\"^([*+-]|(\\\\d+\\\\.))\\\\s+\"},{cN:\"strong\",b:\"[*_]{2}.+?[*_]{2}\"},{cN:\"emphasis\",v:[{b:\"\\\\*.+?\\\\*\"},{b:\"_.+?_\",r:0}]},{cN:\"quote\",b:\"^>\\\\s+\",e:\"$\"},{cN:\"code\",v:[{b:\"^```w*s*$\",e:\"^```s*$\"},{b:\"`.+?`\"},{b:\"^( {4}|\t)\",e:\"$\",r:0}]},{b:\"^[-\\\\*]{3,}\",e:\"$\"},{b:\"\\\\[.+?\\\\][\\\\(\\\\[].*?[\\\\)\\\\]]\",rB:!0,c:[{cN:\"string\",b:\"\\\\[\",e:\"\\\\]\",eB:!0,rE:!0,r:0},{cN:\"link\",b:\"\\\\]\\\\(\",e:\"\\\\)\",eB:!0,eE:!0},{cN:\"symbol\",b:\"\\\\]\\\\[\",e:\"\\\\]\",eB:!0,eE:!0}],r:10},{b:/^\\[[^\\n]+\\]:/,rB:!0,c:[{cN:\"symbol\",b:/\\[/,e:/\\]/,eB:!0,eE:!0},{cN:\"link\",b:/:\\s*/,e:/$/,eB:!0}]}]}});hljs.registerLanguage(\"coffeescript\",function(e){var c={keyword:\"in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger super yield import export from as default await then unless until loop of by when and or is isnt not\",literal:\"true false null undefined yes no on off\",built_in:\"npm require console print module global window document\"},n=\"[A-Za-z$_][0-9A-Za-z$_]*\",r={cN:\"subst\",b:/#\\{/,e:/}/,k:c},i=[e.BNM,e.inherit(e.CNM,{starts:{e:\"(\\\\s*/)?\",r:0}}),{cN:\"string\",v:[{b:/'''/,e:/'''/,c:[e.BE]},{b:/'/,e:/'/,c:[e.BE]},{b:/\"\"\"/,e:/\"\"\"/,c:[e.BE,r]},{b:/\"/,e:/\"/,c:[e.BE,r]}]},{cN:\"regexp\",v:[{b:\"///\",e:\"///\",c:[r,e.HCM]},{b:\"//[gim]*\",r:0},{b:/\\/(?![ *])(\\\\\\/|.)*?\\/[gim]*(?=\\W|$)/}]},{b:\"@\"+n},{sL:\"javascript\",eB:!0,eE:!0,v:[{b:\"```\",e:\"```\"},{b:\"`\",e:\"`\"}]}];r.c=i;var s=e.inherit(e.TM,{b:n}),t=\"(\\\\(.*\\\\))?\\\\s*\\\\B[-=]>\",o={cN:\"params\",b:\"\\\\([^\\\\(]\",rB:!0,c:[{b:/\\(/,e:/\\)/,k:c,c:[\"self\"].concat(i)}]};return{aliases:[\"coffee\",\"cson\",\"iced\"],k:c,i:/\\/\\*/,c:i.concat([e.C(\"###\",\"###\"),e.HCM,{cN:\"function\",b:\"^\\\\s*\"+n+\"\\\\s*=\\\\s*\"+t,e:\"[-=]>\",rB:!0,c:[s,o]},{b:/[:\\(,=]\\s*/,r:0,c:[{cN:\"function\",b:t,e:\"[-=]>\",rB:!0,c:[o]}]},{cN:\"class\",bK:\"class\",e:\"$\",i:/[:=\"\\[\\]]/,c:[{bK:\"extends\",eW:!0,i:/[:=\"\\[\\]]/,c:[s]},s]},{b:n+\":\",e:\":\",rB:!0,rE:!0,r:0}])}});"],"sourceRoot":""}